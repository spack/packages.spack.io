{
    "aliases": [],
    "build_system": "AutotoolsPackage",
    "conflicts": [
        {
            "description": null,
            "name": "arch=windows-None-None",
            "spec": "build_system=autotools"
        }
    ],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "The GNU config.guess and config.sub scripts versioned by timestamp.\nThis package can be used as a build dependency for autotools packages\nthat ship a tarball with outdated config.guess and config.sub files.",
            "name": "gnuconfig"
        },
        {
            "description": "IBM MPI implementation from Spectrum MPI.",
            "name": "mpi"
        },
        {
            "description": "To improve scalability for very large and massively parallel traces the\nOpen Trace Format (OTF) is developed at ZIH as a successor format to the\nVampir Trace Format (VTF3).",
            "name": "otf"
        },
        {
            "description": "PAPI provides the tool designer and application engineer with a\nconsistent interface and methodology for use of the performance counter\nhardware found in most major microprocessors. PAPI enables software\nengineers to see, in near real time, the relation between software\nperformance and processor events. In addition Component PAPI provides\naccess to a collection of components that expose performance measurement\nopportunities across the hardware and software stack.",
            "name": "papi"
        },
        {
            "description": "zlib replacement with optimizations for next generation systems.",
            "name": "zlib-api"
        }
    ],
    "dependent_to": [],
    "description": "VampirTrace is an open source library that allows detailed logging of\nprogram execution for parallel applications using message passing (MPI)\nand threads (OpenMP, Pthreads).\n",
    "homepage": "https://tu-dresden.de/zih/forschung/projekte/vampirtrace",
    "latest_version": "5.14.4",
    "maintainers": [],
    "name": "vampirtrace",
    "patches": [
        {
            "level": 1,
            "owner": "builtin.vampirtrace",
            "relative_path": "mpi3-const.patch",
            "reverse": false,
            "sha256": "6b96a819ca4d940ae761948000609afa73b517315bfe50314152f928988a095c",
            "version": "^mpich@3.3:",
            "working_dir": "."
        },
        {
            "level": 1,
            "owner": "builtin.vampirtrace",
            "relative_path": "mpi3-const.patch",
            "reverse": false,
            "sha256": "6b96a819ca4d940ae761948000609afa73b517315bfe50314152f928988a095c",
            "version": "^openmpi",
            "working_dir": "."
        }
    ],
    "resources": [],
    "variants": [
        {
            "default": "autotools",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": true,
            "description": "Enable MPI support",
            "name": "mpi"
        }
    ],
    "versions": [
        {
            "name": "5.14.4",
            "sha256": "1719a1666dd274c221b781631958cae56aa8bcb3f22861fb4ba6526c1b465a30"
        }
    ],
    "versions_deprecated": []
}