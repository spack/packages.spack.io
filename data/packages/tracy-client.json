{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        }
    ],
    "dependent_to": [
        {
            "description": "C++ runtime system for parallellism and concurrency.",
            "name": "pika"
        }
    ],
    "description": "A real time, nanosecond resolution, remote telemetry, hybrid frame and\nsampling profiler for games and other applications. Client library.\n",
    "homepage": "https://github.com/wolfpld/tracy",
    "latest_version": "0.10",
    "maintainers": [
        "msimberg"
    ],
    "name": "tracy-client",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": false,
            "description": "Enfore callstack collection for tracy regions",
            "name": "callstack"
        },
        {
            "default": false,
            "description": "Enable delayed initialization of the library (init on first call)",
            "name": "delayed_init"
        },
        {
            "default": true,
            "description": "Enable profiling",
            "name": "enable"
        },
        {
            "default": false,
            "description": "Enable fibers support",
            "name": "fibers"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": false,
            "description": "Enable the manual lifetime management of the profile",
            "name": "manual_lifetime"
        },
        {
            "default": false,
            "description": "Disable client discovery by broadcast to local network",
            "name": "no_broadcast"
        },
        {
            "default": false,
            "description": "Disable all callstack related functionality",
            "name": "no_callstack"
        },
        {
            "default": false,
            "description": "Disables the inline functions in callstacks",
            "name": "no_callstack_inlines"
        },
        {
            "default": false,
            "description": "Disable collection of source code",
            "name": "no_code_transfer"
        },
        {
            "default": false,
            "description": "Disable capture of context switches",
            "name": "no_context_switch"
        },
        {
            "default": false,
            "description": "Disable crash handling",
            "name": "no_crash_handler"
        },
        {
            "default": false,
            "description": "Client executable does not exit until all profile data is sent to server",
            "name": "no_exit"
        },
        {
            "default": false,
            "description": "Disable the frame image support and its thread",
            "name": "no_frame_image"
        },
        {
            "default": false,
            "description": "Disable call stack sampling",
            "name": "no_sampling"
        },
        {
            "default": false,
            "description": "Disable systrace sampling",
            "name": "no_system_tracing"
        },
        {
            "default": false,
            "description": "Disable zone validation for C API",
            "name": "no_verify"
        },
        {
            "default": false,
            "description": "Disable capture of hardware Vsync events",
            "name": "no_vsync_capture"
        },
        {
            "default": false,
            "description": "On-demand profiling",
            "name": "on_demand"
        },
        {
            "default": false,
            "description": "Tracy will only accept connections on IPv4 addresses (disable IPv6)",
            "name": "only_ipv4"
        },
        {
            "default": false,
            "description": "Only listen on the localhost interface",
            "name": "only_localhost"
        },
        {
            "default": true,
            "description": "Build the client library as a shared library",
            "name": "shared"
        },
        {
            "default": false,
            "description": "Use lower resolution timers",
            "name": "timer_fallback"
        }
    ],
    "versions": [
        {
            "branch": "master",
            "git": "https://github.com/wolfpld/tracy.git",
            "name": "master"
        },
        {
            "name": "0.10",
            "sha256": "a76017d928f3f2727540fb950edd3b736caa97b12dbb4e5edce66542cbea6600"
        },
        {
            "name": "0.9",
            "sha256": "93a91544e3d88f3bc4c405bad3dbc916ba951cdaadd5fcec1139af6fa56e6bfc"
        },
        {
            "name": "0.8.2",
            "sha256": "4784eddd89c17a5fa030d408392992b3da3c503c872800e9d3746d985cfcc92a"
        },
        {
            "name": "0.8.1",
            "sha256": "004992012b2dc879a9f6d143cbf94d7ea30e88135db3ef08951605d214892891"
        }
    ],
    "versions_deprecated": []
}