{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "IBM MPI implementation from Spectrum MPI.",
            "name": "mpi"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        }
    ],
    "dependent_to": [],
    "description": "This library records the statistics information of run-time performance\nand the trace information of a user code and reports its summary. The\nPMlib is able to use for both serial and parallel environments including\nhybrid(OpenMP & MPI) code. In addition, PAPI interface allows us to\naccess the information of build-in hardware counter.\n",
    "homepage": "https://github.com/avr-aics-riken/PMlib",
    "latest_version": "6.4.1",
    "maintainers": [],
    "name": "pmlib",
    "patches": [
        {
            "level": 1,
            "owner": "builtin.pmlib",
            "relative_path": "fix_compiler_options.patch",
            "reverse": false,
            "sha256": "1989dd1400c96570e89b1ce29c8df8400850357ee66055a936c155ed2ec5edc5",
            "version": "",
            "working_dir": "."
        }
    ],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": false,
            "description": "This option turns on compiling sample codes.",
            "name": "example"
        },
        {
            "default": false,
            "description": "This option tells a compiler to use a Fortran.",
            "name": "fortran"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": true,
            "description": "Activate MPI support",
            "name": "mpi"
        },
        {
            "default": false,
            "description": "Enable OpenMP directives",
            "name": "openmp"
        },
        {
            "default": false,
            "description": "Use OTF library",
            "name": "otf"
        },
        {
            "default": false,
            "description": "Use PAPI library",
            "name": "papi"
        },
        {
            "default": true,
            "description": "This option provides -DUSE_PRECISE_TIMER to C++ compiler option CMAKE_CXX_FLAGS when building the PMlib library.",
            "name": "precisetimer"
        }
    ],
    "versions": [
        {
            "branch": "master",
            "name": "master"
        },
        {
            "commit": "0a35f5bec8c12e532e5a1bdac8c32c659fd3ee11",
            "name": "6.4.1"
        }
    ],
    "versions_deprecated": []
}