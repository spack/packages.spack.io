{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "HDF5 is a data model, library, and file format for storing and managing\ndata. It supports an unlimited variety of datatypes, and is designed for\nflexible and efficient I/O and for high volume and complex data.",
            "name": "hdf5"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        },
        {
            "description": "Zstandard, or zstd as short version, is a fast lossless compression\nalgorithm, targeting real-time compression scenarios at zlib-level and\nbetter compression ratios.",
            "name": "zstd"
        }
    ],
    "dependent_to": [],
    "description": " VBZ Compression uses variable byte integer encoding to compress\nnanopore signal data and is built using the following libraries:\nhttps://github.com/lemire/streamvbyte https://github.com/facebook/zstd\nThe performance of VBZ is achieved by taking advantage of the properties\nof the raw signal and therefore is most effective when applied to the\nsignal dataset. Other datasets you may have in your Fast5 files will not\nbe able to take advantage of the default VBZ settings for compression.\nVBZ will be used as the default compression scheme in a future release\nof MinKNOW.\n",
    "homepage": "https://nanoporetech.com",
    "latest_version": "1.0.3",
    "maintainers": [],
    "name": "vbz-compression",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        }
    ],
    "versions": [
        {
            "commit": "02fb8f50b93921ffa3c040106e809aaf8adbe5c5",
            "name": "1.0.3"
        },
        {
            "commit": "3f77a01c6a0a41707b7a5bcea959e734178b6ce2",
            "name": "1.0.2"
        },
        {
            "commit": "975cbcf33640d131b5cf2d2a124eed1a702b54f7",
            "name": "1.0.1"
        },
        {
            "commit": "2db0e3f62fa7a612dc42dc802401c26781eed068",
            "name": "1.0.0"
        },
        {
            "commit": "9a748efcdd0754be835e1080cf7086f3451e17d1",
            "name": "0.9.3"
        }
    ],
    "versions_deprecated": []
}