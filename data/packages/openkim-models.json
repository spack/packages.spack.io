{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "OpenKIM is an online framework for making molecular simulations\nreliable, reproducible, and portable. Computer implementations of inter-\natomic models are archived in OpenKIM, verified for coding integrity,\nand tested by computing their predictions for a variety of material\nproperties. Models conforming to the KIM application programming\ninterface (API) work seamlessly with major simulation codes that have\nadopted the KIM API standard. This package provides the kim-api library\nand supporting utilities. It also provides a small set of example\nmodels. To obtain all models archived at https://openkim.org that are\ncompatible with the kim-api package, install and activate the openkim-\nmodels package too.",
            "name": "kim-api"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        }
    ],
    "dependent_to": [],
    "description": "OpenKIM is an online framework for making molecular simulations\nreliable, reproducible, and portable. Computer implementations of inter-\natomic models are archived in OpenKIM, verified for coding integrity,\nand tested by computing their predictions for a variety of material\nproperties. Models conforming to the KIM application programming\ninterface (API) work seamlessly with major simulation codes that have\nadopted the KIM API standard. This package provides all models archived\nat openkim.org that are compatible with the kim-api package.\n",
    "homepage": "https://openkim.org/",
    "latest_version": "2021-01-28",
    "maintainers": [
        "ellio167"
    ],
    "name": "openkim-models",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        }
    ],
    "versions": [
        {
            "name": "2021-01-28",
            "sha256": "8824adee02ae4583bd378cc81140fbb49515c5965708ee98d856d122d48dd95f"
        },
        {
            "name": "2019-07-25",
            "sha256": "50338084ece92ec0fb13b0bbdf357b5d7450e26068ba501f23c315f814befc26"
        },
        {
            "name": "2019-03-29",
            "sha256": "053dda2023fe4bb6d7c1d66530c758c4e633bbf1f1be17b6b075b276fe8874f6"
        }
    ],
    "versions_deprecated": []
}