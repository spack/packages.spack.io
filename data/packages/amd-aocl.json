{
    "aliases": [],
    "build_system": "BundlePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "AMD Optimized BLIS. BLIS is a portable software framework for\ninstantiating high-performance BLAS-like dense linear algebra libraries.\nThe framework was designed to isolate essential kernels of computation\nthat, when optimized, immediately enable optimized implementations of\nmost of its commonly used and computationally intensive operations.\nLICENSING INFORMATION: By downloading, installing and using this\nsoftware, you agree to the terms and conditions of the AMD AOCL-BLIS\nlicense agreement. You may obtain a copy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/dense/eula/blas-4-2-eula.html\nhttps://www.amd.com/en/developer/aocl/dense/eula/blas-eula.html",
            "name": "amdblis"
        },
        {
            "description": "FFTW (AMD Optimized version) is a comprehensive collection of fast C\nroutines for computing the Discrete Fourier Transform (DFT) and various\nspecial cases thereof. It is an open-source implementation of the Fast\nFourier transform algorithm. It can compute transforms of real and\ncomplex-values arrays of arbitrary size and dimension. AMD Optimized\nFFTW is the optimized FFTW implementation targeted for AMD CPUs. For\nsingle precision build, please use precision value as float. Example :\nspack install amdfftw precision=float LICENSING INFORMATION: By\ndownloading, installing and using this software, you agree to the terms\nand conditions of the AMD AOCL-FFTW license agreement. You may obtain a\ncopy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/fftw/eula/fftw-\nlibraries-4-2-eula.html\nhttps://www.amd.com/en/developer/aocl/fftw/eula/fftw-libraries-eula.html",
            "name": "amdfftw"
        },
        {
            "description": "libFLAME (AMD Optimized version) is a portable library for dense matrix\ncomputations, providing much of the functionality present in Linear\nAlgebra Package (LAPACK). It includes a compatibility layer, FLAPACK,\nwhich includes complete LAPACK implementation. The library provides\nscientific and numerical computing communities with a modern, high-\nperformance dense linear algebra library that is extensible, easy to\nuse, and available under an open source license. libFLAME is a C-only\nimplementation and does not depend on any external FORTRAN libraries\nincluding LAPACK. There is an optional backward compatibility layer,\nlapack2flame that maps LAPACK routine invocations to their corresponding\nnative C implementations in libFLAME. This allows legacy applications to\nstart taking advantage of libFLAME with virtually no changes to their\nsource code. In combination with BLIS library which includes\noptimizations for the AMD EPYC processor family, libFLAME enables\nrunning high performing LAPACK functionalities on AMD platform.\nLICENSING INFORMATION: By downloading, installing and using this\nsoftware, you agree to the terms and conditions of the AMD AOCL-libFLAME\nlicense agreement. You may obtain a copy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/dense/eula-\nlibflame/libflame-4-2-eula.html\nhttps://www.amd.com/en/developer/aocl/dense/eula-libflame/libflame-\neula.html",
            "name": "amdlibflame"
        },
        {
            "description": "AMD LibM is a software library containing a collection of basic math\nfunctions optimized for x86-64 processor-based machines. It provides\nmany routines from the list of standard C99 math functions. Applications\ncan link into AMD LibM library and invoke math functions instead of\ncompiler's math functions for better accuracy and performance. LICENSING\nINFORMATION: By downloading, installing and using this software, you\nagree to the terms and conditions of the AMD AOCL-FFTW license\nagreement. You may obtain a copy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/libm/eula/libm-4-2-eula.html\nhttps://www.amd.com/en/developer/aocl/libm/libm-eula.html",
            "name": "amdlibm"
        },
        {
            "description": "ScaLAPACK is a library of high-performance linear algebra routines for\nparallel distributed memory machines. It depends on external libraries\nincluding BLAS and LAPACK for Linear Algebra computations. AMD's\noptimized version of ScaLAPACK enables using BLIS and LibFLAME library\nthat have optimized dense matrix functions and solvers for AMD EPYC\nprocessor family CPUs. LICENSING INFORMATION: By downloading, installing\nand using this software, you agree to the terms and conditions of the\nAMD AOCL-ScaLAPACK license agreement. You may obtain a copy of this\nlicense agreement from\nhttps://www.amd.com/en/developer/aocl/scalapack/eula/scalapack-\nlibraries-4-2-eula.html\nhttps://www.amd.com/en/developer/aocl/scalapack/eula/scalapack-\nlibraries-eula.html",
            "name": "amdscalapack"
        },
        {
            "description": "AOCL-Compression is a software framework of various lossless\ncompression and decompression methods tuned and optimized for AMD Zen\nbased CPUs. This framework offers a single set of unified APIs for all\nthe supported compression and decompression methods which facilitate the\napplications to easily integrate and use them. AOCL-Compression supports\nlz4, zlib/deflate, lzma, zstd, bzip2, snappy, and lz4hc based\ncompression and decompression methods along with their native APIs. The\nlibrary offers openMP based multi-threaded implementation of lz4, zlib,\nzstd and snappy compression methods. It supports the dynamic dispatcher\nfeature that executes the most optimal function variant implemented\nusing Function Multi-versioning thereby offering a single optimized\nlibrary portable across different x86 CPU architectures. AOCL-\nCompression framework is developed in C for UNIX\u00ae and Windows\u00ae based\nsystems. A test suite is provided for the validation and performance\nbenchmarking of the supported compression and decompression methods.\nThis suite also supports the benchmarking of IPP compression methods,\nsuch as, lz4, lz4hc, zlib and bzip2. The library build framework offers\nCTest based testing of the test cases implemented using GTest and the\nlibrary test suite. LICENSING INFORMATION: By downloading, installing\nand using this software, you agree to the terms and conditions of the\nAMD AOCL-Compression license agreement. You may obtain a copy of this\nlicense agreement from https://www.amd.com/content/dam/amd/en/documents/\ndeveloper/version-4-2-eulas/compression-elua-4-2.pdf",
            "name": "aocl-compression"
        },
        {
            "description": "AOCL-Crypto is a library consisting of basic cryptographic functions\noptimized and tuned for AMD Zen\u2122 based microarchitecture. This library\nprovides a unified solution for Cryptographic routines such as AES\n(Advanced Encryption Standard) encryption/decryption routines (CFB, CTR,\nCBC, CCM, GCM, OFB, SIV, XTS), SHA (Secure Hash Algorithms) routines\n(SHA2, SHA3, SHAKE), Message Authentication Code (CMAC, HMAC), ECDH\n(Elliptic-curve Diffie\u2013Hellman) and RSA (Rivest, Shamir, and Adleman)\nkey generation functions, etc. AOCL Crypto supports a dynamic dispatcher\nfeature that executes the most optimal function variant implemented\nusing Function Multi-versioning thereby offering a single optimized\nlibrary portable across different x86 CPU architectures. AOCL Crypto\nframework is developed in C / C++ for Unix and Windows based systems.\nLICENSING INFORMATION: By downloading, installing and using this\nsoftware, you agree to the terms and conditions of the AMD AOCL-\nCryptography license agreement. You may obtain a copy of this license\nagreement from https://www.amd.com/en/developer/aocl/cryptography/eula/c\nryptography-4-2-eula.html",
            "name": "aocl-crypto"
        },
        {
            "description": "The AOCL Data Analytics Library (AOCL-DA) is a data analytics library\nproviding optimized building blocks for data analysis. It is written\nwith a C-compatible interface to make it as seamless as possible to\nintegrate with the library from whichever programming language you are\nusing. The intended workflow for using the library is as follows: \u2022 load\ndata from memory by reading CSV files or using the in-built da_datastore\nobject \u2022 preprocess the data by removing missing values, standardizing,\nand selecting certain subsets of the data, before extracting contiguous\narrays of data from the da_datastore objects \u2022 data processing (e.g.\nprincipal component analysis, linear model fitting, etc.) C++ example\nprograms can be found in the examples folder of your installation.",
            "name": "aocl-da"
        },
        {
            "description": "AOCL-LibMem is a Linux library of data movement and manipulation\nfunctions (such as memcpy and strcpy) highly optimized for AMD Zen\nmicro-architecture. This library has multiple implementations of each\nfunction that can be chosen based on the application requirements as per\nalignments, instruction choice, threshold values, and tunable\nparameters. By default, this library will choose the best fit\nimplementation based on the underlying micro-architectural support for\nCPU features and instructions. LICENSING INFORMATION: By downloading,\ninstalling and using this software, you agree to the terms and\nconditions of the AMD AOCL-LibMem license agreement. You may obtain a\ncopy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/libmem/eula/libmem-4-2-eula.html",
            "name": "aocl-libmem"
        },
        {
            "description": "AOCL-Sparse is a library that contains basic linear algebra subroutines\nfor sparse matrices and vectors optimized for AMD EPYC family of\nprocessors. It is designed to be used with C and C++. Current\nfunctionality of sparse library supports SPMV function with CSR and\nELLPACK formats. LICENSING INFORMATION: By downloading, installing and\nusing this software, you agree to the terms and conditions of the AMD\nAOCL-Sparse license agreement. You may obtain a copy of this license\nagreement from https://www.amd.com/en/developer/aocl/sparse/eula/sparse-\nlibraries-4-2-eula.html\nhttps://www.amd.com/en/developer/aocl/sparse/eula/sparse-libraries-\neula.html",
            "name": "aocl-sparse"
        },
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "blas"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "lapack"
        },
        {
            "description": "NVPL ScaLAPACK (NVIDIA Performance Libraries ScaLAPACK).",
            "name": "scalapack"
        }
    ],
    "dependent_to": [],
    "description": "AMD Optimizing CPU Libraries (AOCL) - AOCL is a set of numerical\nlibraries tuned specifically for AMD EPYC processor family. They have a\nsimple interface to take advantage of the latest hardware innovations.\nThe tuned implementations of industry standard math libraries enable\nfast development of scientific and high performance computing projects\nLICENSING INFORMATION: By downloading, installing and using this\nsoftware, you agree to the terms and conditions of the AMD AOCL license\nagreement. You may obtain a copy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/aocl-eula.html\nhttps://www.amd.com/en/developer/aocl/eula/aocl-4-1-eula.html\n",
    "homepage": "https://developer.amd.com/amd-aocl/",
    "latest_version": "5.0",
    "maintainers": [
        "amd-toolchain-support"
    ],
    "name": "amd-aocl",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "bundle",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": false,
            "description": "Enable OpenMP support.",
            "name": "openmp"
        }
    ],
    "versions": [
        {
            "name": "5.0"
        },
        {
            "name": "4.2"
        },
        {
            "name": "4.1"
        },
        {
            "name": "4.0"
        },
        {
            "name": "3.2"
        },
        {
            "name": "3.1"
        },
        {
            "name": "3.0"
        },
        {
            "name": "2.2"
        }
    ],
    "versions_deprecated": []
}