{
    "aliases": [],
    "build_system": "Package",
    "conflicts": [],
    "dependencies": [
        {
            "description": "ARMCI-MPI is an implementation of the ARMCI library used by Global\nArrays. MPI-3 one-sided communication is used to implement ARMCI.",
            "name": "armcimpi"
        },
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "blas"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "CUDA is a parallel computing platform and programming model invented by\nNVIDIA. It enables dramatic increases in computing performance by\nharnessing the power of the graphics processing unit (GPU). Note: This\npackage does not currently install the drivers necessary to run CUDA.\nThese will need to be installed manually. See:\nhttps://docs.nvidia.com/cuda/ for details.",
            "name": "cuda"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "Eigenvalue solvers for Petaflop-Applications (ELPA)",
            "name": "elpa"
        },
        {
            "description": "NVPL FFT (NVIDIA Performance Libraries FFT) is part of NVIDIA\nPerformance Libraries and provides Fast Fourier Transform (FFT)\ncalculations on ARM CPUs.",
            "name": "fftw-api"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "lapack"
        },
        {
            "description": "The Open Fabrics Interfaces (OFI) is a framework focused on exporting\nfabric communication services to applications.",
            "name": "libfabric"
        },
        {
            "description": "Libxc is a library of exchange-correlation functionals for density-\nfunctional theory.",
            "name": "libxc"
        },
        {
            "description": "IBM MPI implementation from Spectrum MPI.",
            "name": "mpi"
        },
        {
            "description": "Patch takes a patch file containing a difference listing produced by the\ndiff program and applies those differences to one or more original\nfiles, producing patched versions.",
            "name": "patch"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "RDMA core userspace libraries and daemons",
            "name": "rdma-core"
        },
        {
            "description": "NVPL ScaLAPACK (NVIDIA Performance Libraries ScaLAPACK).",
            "name": "scalapack"
        },
        {
            "description": "GNU Tar provides the ability to create tar archives, as well as various\nother kinds of manipulation.",
            "name": "tar"
        }
    ],
    "dependent_to": [],
    "description": "High-performance computational chemistry software\n",
    "homepage": "https://nwchemgit.github.io",
    "latest_version": "7.2.3",
    "maintainers": [
        "jeffhammond"
    ],
    "name": "nwchem",
    "patches": [
        {
            "level": 1,
            "owner": "builtin.nwchem",
            "relative_path": "oneapi2025.patch",
            "reverse": false,
            "sha256": "f8e2f428a2e695583c6e44c6aa5cbcc9d1e878065c031782298993af8d0fe9e0",
            "version": "@7.2.3 %oneapi@2025:",
            "working_dir": "."
        },
        {
            "level": 1,
            "owner": "builtin.nwchem",
            "relative_path": "fj.patch",
            "reverse": false,
            "sha256": "d89d51d173657c4e0d245df7bc77478ff9344e222e77a0f7978ab98f6a17da43",
            "version": "@7.0.2 %fj",
            "working_dir": "."
        },
        {
            "level": 1,
            "owner": "builtin.nwchem",
            "relative_path": "fftw_splans.patch",
            "reverse": false,
            "sha256": "235134c148b7b683197cc6dced6e4ccdbfe4b4d2380c3173a2f55f5900ead51d",
            "version": "@7.2.0:7.2.3+fftw3",
            "working_dir": "."
        }
    ],
    "resources": [
        {
            "destination": "",
            "name": "dftd3.tgz",
            "placement": "dft-d3",
            "version": ""
        }
    ],
    "variants": [
        {
            "default": "mpi-ts",
            "description": "ARMCI runtime",
            "name": "armci"
        },
        {
            "default": "generic",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": false,
            "description": "Enable optimised diagonalisation routines from ELPA",
            "name": "elpa"
        },
        {
            "default": false,
            "description": "Enables rarely-used TCE features (CCSDTQ, CCSDTLR, EACCSD, IPCCSD, MRCC)",
            "name": "extratce"
        },
        {
            "default": false,
            "description": "Use F90 allocatable instead of MA",
            "name": "f90allocatable"
        },
        {
            "default": false,
            "description": "Link against the FFTW library",
            "name": "fftw3"
        },
        {
            "default": false,
            "description": "Support additional functionals via libxc",
            "name": "libxc"
        },
        {
            "default": false,
            "description": "Enables OpenMP support",
            "name": "openmp"
        },
        {
            "default": false,
            "description": "Enable TCE CCSD(T) CUDA support",
            "name": "tcecuda"
        }
    ],
    "versions": [
        {
            "branch": "master",
            "name": "master"
        },
        {
            "name": "7.2.3",
            "sha256": "8cb4ec065215bc0316d8e01f67f1674a572f7d0f565c52e4a327975c04ddb6eb",
            "url": "https://github.com/nwchemgit/nwchem/releases/download/v7.2.3-release/nwchem-7.2.3-release.revision-d690e065-srconly.2024-08-27.tar.bz2"
        },
        {
            "name": "7.2.2",
            "sha256": "6b68e9c12eec38c09d92472bdd1ff130b93c1b5e1f65e4702aa7ee36c80e4af7",
            "url": "https://github.com/nwchemgit/nwchem/releases/download/v7.2.2-release/nwchem-7.2.2-release.revision-74936fb9-srconly.2023-11-03.tar.bz2"
        },
        {
            "name": "7.2.0",
            "sha256": "28ea70947e77886337c84e6fae3bdf88f25f0acfdeaf95e722615779c19f7a7e",
            "url": "https://github.com/nwchemgit/nwchem/releases/download/v7.2.0-release/nwchem-7.2.0-release.revision-d0d141fd-srconly.2023-03-10.tar.bz2"
        },
        {
            "name": "7.0.2",
            "sha256": "9bf913b811b97c8ed51bc5a02bf1c8e18456d0719c0a82b2e71223a596d945a7",
            "url": "https://github.com/nwchemgit/nwchem/releases/download/v7.0.2-release/nwchem-7.0.2-release.revision-b9985dfa-srconly.2020-10-12.tar.bz2"
        }
    ],
    "versions_deprecated": []
}