{
    "aliases": [],
    "build_system": "PythonPackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "Distribution-building parts of Flit.",
            "name": "py-flit-core"
        },
        {
            "description": "The PyPA recommended tool for installing Python packages.",
            "name": "py-pip"
        },
        {
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages.",
            "name": "py-setuptools"
        },
        {
            "description": "A built-package format for Python.",
            "name": "py-wheel"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "A Spack managed Python virtual environment",
            "name": "python-venv"
        }
    ],
    "dependent_to": [
        {
            "description": "BEE is a workflow orchestration system designed to build containerized\nHPC applications and orchestrate workflows across HPC and cloud systems.\nBEE has adopted the Common Workflow Language (CWL) for specifying\nworkflows. Complex scientific workflows specified by CWL are managed and\nvisualized through a graph database, giving the user the ability to\nmonitor the state of each task in the workflow. BEE runs jobs using the\nworkload scheduler (i.e. Slurm or Flux) on the HPC system that tasks are\nspecified to run on.",
            "name": "hpc-beeflow"
        },
        {
            "description": "Provides typing hints to be shared between LCLS-II analysis packages.",
            "name": "py-amityping"
        },
        {
            "description": "Black is the uncompromising Python code formatter. By using it, you\nagree to cede control over minutiae of hand-formatting. In return, Black\ngives you speed, determinism, and freedom from pycodestyle nagging about\nformatting.",
            "name": "py-black"
        },
        {
            "description": "Python Serverless Microframework for AWS.",
            "name": "py-chalice"
        },
        {
            "description": "Common workflow language reference implementation",
            "name": "py-cwltool"
        },
        {
            "description": "Generating type annotations from sampled production types.",
            "name": "py-monkeytype"
        },
        {
            "description": "Optional static typing for Python.",
            "name": "py-mypy"
        },
        {
            "description": "LCLS II Developement: PSAna Python.",
            "name": "py-psana"
        },
        {
            "description": "Simplified packaging for pybind11-based C++ extensions",
            "name": "py-setuptools-cpp"
        },
        {
            "description": "Runtime inspection utilities for typing module.",
            "name": "py-typing-inspect"
        }
    ],
    "description": "Experimental type system extensions for programs checked with the mypy\ntypechecker.\n",
    "homepage": "https://github.com/python/mypy_extensions",
    "latest_version": "1.1.0",
    "maintainers": [],
    "name": "py-mypy-extensions",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "python_pip",
            "description": "Build systems supported by the package",
            "name": "build_system"
        }
    ],
    "versions": [
        {
            "name": "1.1.0",
            "sha256": "52e68efc3284861e772bbcd66823fde5ae21fd2fdb51c62a211403730b916558"
        },
        {
            "name": "1.0.0",
            "sha256": "75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782"
        },
        {
            "name": "0.4.3",
            "sha256": "2d82818f5bb3e369420cb3c4060a7970edba416647068eb4c5343488a6c604a8"
        }
    ],
    "versions_deprecated": []
}