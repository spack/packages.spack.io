{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "Autoconf -- system configuration part of autotools",
            "name": "autoconf"
        },
        {
            "description": "Automake -- make file builder part of autotools",
            "name": "automake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "Caliper is a program instrumentation and performance measurement\nframework. It is designed as a performance analysis toolbox in a\nlibrary, allowing one to bake performance analysis capabilities directly\ninto applications and activate them at runtime.",
            "name": "caliper"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "API for dynamic binary instrumentation. Modify programs while they are\nexecuting without recompiling, re-linking, or re-executing.",
            "name": "dyninst"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "HIP is a C++ Runtime API and Kernel Language that allows developers to\ncreate portable applications for AMD and NVIDIA GPUs from single source\ncode.",
            "name": "hip"
        },
        {
            "description": "libtool -- library building part of autotools.",
            "name": "libtool"
        },
        {
            "description": "A portable and efficient C programming interface (API) to determine the\ncall-chain of a program.",
            "name": "libunwind"
        },
        {
            "description": "GNU M4 is an implementation of the traditional Unix macro processor.",
            "name": "m4"
        },
        {
            "description": "IBM MPI implementation from Spectrum MPI.",
            "name": "mpi"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        },
        {
            "description": "PAPI provides the tool designer and application engineer with a\nconsistent interface and methodology for use of the performance counter\nhardware found in most major microprocessors. PAPI enables software\nengineers to see, in near real time, the relation between software\nperformance and processor events. In addition Component PAPI provides\naccess to a collection of components that expose performance measurement\nopportunities across the hardware and software stack.",
            "name": "papi"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "A Spack managed Python virtual environment",
            "name": "python-venv"
        },
        {
            "description": "It is a C library for Linux that provides a user space interface for\napplications to monitor and control GPU applications.",
            "name": "rocm-smi-lib"
        },
        {
            "description": "ROCPROFILER library for AMD HSA runtime API extension support",
            "name": "rocprofiler-dev"
        },
        {
            "description": "ROC-tracer library: Runtimes Generic Callback/Activity APIs. The goal of\nthe implementation is to provide a generic independent from specific\nruntime profiler to trace API and asyncronous activity.",
            "name": "roctracer-dev"
        },
        {
            "description": "A portable profiling and tracing toolkit for performance analysis of\nparallel programs written in Fortran, C, C++, UPC, Java, Python.",
            "name": "tau"
        },
        {
            "description": "Texinfo is the official documentation format of the GNU project. It was\ninvented by Richard Stallman and Bob Chassell many years ago, loosely\nbased on Brian Reid's Scribe and other formatting languages of the time.\nIt is used by many non-GNU projects as well.",
            "name": "texinfo"
        }
    ],
    "dependent_to": [],
    "description": "Application Profiling, Tracing, and Analysis\n",
    "homepage": "https://rocm.docs.amd.com/projects/omnitrace/en/latest/index.html",
    "latest_version": "1.12.0",
    "maintainers": [
        "afzpatel",
        "dgaliffiAMD",
        "jrmadsen",
        "renjithravindrankannath",
        "srekolam"
    ],
    "name": "omnitrace",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": false,
            "description": "Enable support for using Caliper markers in omnitrace instrumentation",
            "name": "caliper"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": false,
            "description": "Enable intercepting MPI functions and aggregating output during finalization (requires target application to use same MPI installation)",
            "name": "mpi"
        },
        {
            "default": true,
            "description": "Enable intercepting MPI functions but w/o support for aggregating output (target application can use any MPI installation)",
            "name": "mpi_headers"
        },
        {
            "default": true,
            "description": "Enable OpenMP Tools support",
            "name": "ompt"
        },
        {
            "default": true,
            "description": "Enable HW counters support via PAPI",
            "name": "papi"
        },
        {
            "default": false,
            "description": "Install perfetto tools (e.g. traced, perfetto)",
            "name": "perfetto_tools"
        },
        {
            "default": false,
            "description": "Enable support for Python function profiling and API",
            "name": "python"
        },
        {
            "default": true,
            "description": "Enable ROCm API, kernel tracing, and GPU HW counters support",
            "name": "rocm"
        },
        {
            "default": false,
            "description": "Faster binary instrumentation, worse debugging",
            "name": "strip"
        },
        {
            "default": false,
            "description": "Enable support for using TAU markers in omnitrace instrumentation",
            "name": "tau"
        }
    ],
    "versions": [
        {
            "commit": "abff23ac4238da6d7891d9ac9f36a919e30bf759",
            "name": "1.12.0",
            "tag": "v1.12.0"
        },
        {
            "commit": "6b0627f5b7d4b05c3b7b1da581e474d48ebe36cf",
            "name": "1.11.4",
            "tag": "v1.11.4"
        },
        {
            "commit": "77d52814e9050004cfb11d7917e155b00ab861b1",
            "name": "1.11.0",
            "tag": "v1.11.0"
        },
        {
            "commit": "9de3a6b0b4243bf8ec10164babdd99f64dbc65f2",
            "name": "1.10.0",
            "tag": "v1.10.0"
        },
        {
            "commit": "9eafb2360296277103d2ee706fb5f90b12722668",
            "name": "1.9.0",
            "tag": "v1.9.0"
        },
        {
            "commit": "7c73d981258cc3a29477756a95c1f90c5f8897dd",
            "name": "1.8.0",
            "tag": "v1.8.0"
        },
        {
            "commit": "12001d9633328f9f56210c7ebffce065bff06310",
            "name": "1.7.4"
        },
        {
            "commit": "2ebfe3fc30f977559142509edc4ea190c975992a",
            "name": "1.7.3"
        },
        {
            "commit": "a41a5c155e0d3780de4c83a76f28d7c8ffa6414f",
            "name": "1.7.2"
        },
        {
            "commit": "67f7471253b8e031e476d80d2bc00e569285c1bf",
            "name": "1.7.1"
        },
        {
            "commit": "2a387f909935d06c6a4874a5b11f38fb8521800e",
            "name": "1.7.0"
        },
        {
            "commit": "71a5e271b5e07efd2948fb6e7b451db5e8e40cb8",
            "git": "https://github.com/ROCm/rocprofiler-systems",
            "name": "rocm-6.3.0",
            "tag": "rocm-6.3.0"
        },
        {
            "commit": "47597c1be3699c5aaaf6164061ee4189c6b32445",
            "name": "rocm-6.2.4",
            "tag": "rocm-6.2.4"
        },
        {
            "commit": "df91a342370401c93b5278bf082e520d6a0e22e9",
            "name": "rocm-6.2.1",
            "tag": "rocm-6.2.1"
        },
        {
            "commit": "f0bd9126a5456eb9e511d13261af262d17d9b61b",
            "name": "rocm-6.2.0",
            "tag": "rocm-6.2.0"
        }
    ],
    "versions_deprecated": [
        {
            "commit": "15e6e6d979fcd5f549d952862400f292ec735b8c",
            "name": "1.6.0"
        },
        {
            "commit": "2718596e5a6808a9278c3f6c8fddfaf977d3bcb6",
            "name": "1.5.0"
        },
        {
            "commit": "23fb3946c7f4c0702b1b168e1d78b8b62597e3f1",
            "name": "1.4.0"
        },
        {
            "commit": "641225f88304909fd2ca5407aec062d0fdf0ed8b",
            "name": "1.3.1"
        },
        {
            "commit": "4dd144a32c8b83c44e132ef53f2b44fe4b4d5569",
            "name": "1.3.0"
        },
        {
            "commit": "f82845388aab108ed1d1fc404f433a0def391bb3",
            "name": "1.2.0"
        },
        {
            "branch": "amd-staging",
            "name": "amd-staging"
        },
        {
            "branch": "amd-mainline",
            "name": "amd-mainline"
        }
    ]
}