{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        }
    ],
    "dependent_to": [
        {
            "description": "AMD Optimizing CPU Libraries (AOCL) - AOCL is a set of numerical\nlibraries tuned specifically for AMD EPYC processor family. They have a\nsimple interface to take advantage of the latest hardware innovations.\nThe tuned implementations of industry standard math libraries enable\nfast development of scientific and high performance computing projects\nLICENSING INFORMATION: By downloading, installing and using this\nsoftware, you agree to the terms and conditions of the AMD AOCL license\nagreement. You may obtain a copy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/aocl-eula.html\nhttps://www.amd.com/en/developer/aocl/eula/aocl-4-1-eula.html",
            "name": "amd-aocl"
        }
    ],
    "description": " AOCL-Compression is a software framework of various lossless\ncompression and decompression methods tuned and optimized for AMD Zen\nbased CPUs. This framework offers a single set of unified APIs for all\nthe supported compression and decompression methods which facilitate the\napplications to easily integrate and use them. AOCL-Compression supports\nlz4, zlib/deflate, lzma, zstd, bzip2, snappy, and lz4hc based\ncompression and decompression methods along with their native APIs. The\nlibrary offers openMP based multi-threaded implementation of lz4, zlib,\nzstd and snappy compression methods. It supports the dynamic dispatcher\nfeature that executes the most optimal function variant implemented\nusing Function Multi-versioning thereby offering a single optimized\nlibrary portable across different x86 CPU architectures. AOCL-\nCompression framework is developed in C for UNIX\u00ae and Windows\u00ae based\nsystems. A test suite is provided for the validation and performance\nbenchmarking of the supported compression and decompression methods.\nThis suite also supports the benchmarking of IPP compression methods,\nsuch as, lz4, lz4hc, zlib and bzip2. The library build framework offers\nCTest based testing of the test cases implemented using GTest and the\nlibrary test suite. LICENSING INFORMATION: By downloading, installing\nand using this software, you agree to the terms and conditions of the\nAMD AOCL-Compression license agreement. You may obtain a copy of this\nlicense agreement from https://www.amd.com/content/dam/amd/en/documents/\ndeveloper/version-4-2-eulas/compression-elua-4-2.pdf\n",
    "homepage": "https://www.amd.com/en/developer/aocl/compression.html",
    "latest_version": "5.0",
    "maintainers": [
        "amd-toolchain-support"
    ],
    "name": "aocl-compression",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": true,
            "description": "Build bzip2 library",
            "name": "bzip2"
        },
        {
            "default": "OFF",
            "description": "Enable fast decompression modes",
            "name": "decompress_fast"
        },
        {
            "default": false,
            "description": "Enable fast-math optimizations",
            "name": "enable_fast_math"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": true,
            "description": "Build lz4 library",
            "name": "lz4"
        },
        {
            "default": true,
            "description": "Build lz4hc library",
            "name": "lz4hc"
        },
        {
            "default": true,
            "description": "Build lzma library",
            "name": "lzma"
        },
        {
            "default": false,
            "description": "openmp based multi-threaded compression and decompression",
            "name": "openmp"
        },
        {
            "default": true,
            "description": "Build shared library",
            "name": "shared"
        },
        {
            "default": true,
            "description": "Build snappy library",
            "name": "snappy"
        },
        {
            "default": true,
            "description": "Build zlib library",
            "name": "zlib"
        },
        {
            "default": true,
            "description": "Build zstd library",
            "name": "zstd"
        }
    ],
    "versions": [
        {
            "name": "5.0",
            "sha256": "50bfb2c4a4738b96ed6d45627062b17bb9d0e1787c7d83ead2841da520327fa4"
        },
        {
            "name": "4.2",
            "sha256": "a18b3e7f64a8105c1500dda7b4c343e974b5e26bfe3dd838a1c1acf82a969c6f"
        }
    ],
    "versions_deprecated": []
}