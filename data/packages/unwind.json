{
    "aliases": [
        {
            "alias_for": "libunwind",
            "name": "unwind"
        }
    ],
    "build_system": "AutotoolsPackage",
    "conflicts": [
        {
            "description": null,
            "name": "arch=None-None-aarch64:",
            "spec": "@1.8:"
        },
        {
            "description": null,
            "name": "arch=None-None-ppc64:",
            "spec": "@1.8"
        },
        {
            "description": null,
            "name": "arch=None-None-ppc64le:",
            "spec": "@1.8"
        },
        {
            "description": "libunwind: Non-GNU libunwind needs ELF libraries Darwin does not have",
            "name": "arch=darwin-None-None",
            "spec": ""
        },
        {
            "description": null,
            "name": "arch=windows-None-None",
            "spec": "build_system=autotools"
        }
    ],
    "dependencies": [
        {
            "description": "Autoconf -- system configuration part of autotools",
            "name": "autoconf"
        },
        {
            "description": "Automake -- make file builder part of autotools",
            "name": "automake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "The GNU config.guess and config.sub scripts versioned by timestamp.\nThis package can be used as a build dependency for autotools packages\nthat ship a tarball with outdated config.guess and config.sub files.",
            "name": "gnuconfig"
        },
        {
            "description": "libtool -- library building part of autotools.",
            "name": "libtool"
        },
        {
            "description": "GNU M4 is an implementation of the traditional Unix macro processor.",
            "name": "m4"
        },
        {
            "description": "XZ Utils is free general-purpose data compression software with high\ncompression ratio. XZ Utils were written for POSIX-like systems, but\nalso work on some not-so-POSIX systems. XZ Utils are the successor to\nLZMA Utils.",
            "name": "xz"
        },
        {
            "description": "zlib replacement with optimizations for next generation systems.",
            "name": "zlib-api"
        }
    ],
    "dependent_to": [
        {
            "description": "Caliper is a program instrumentation and performance measurement\nframework. It is designed as a performance analysis toolbox in a\nlibrary, allowing one to bake performance analysis capabilities directly\ninto applications and activate them at runtime.",
            "name": "caliper"
        },
        {
            "description": "Google's fast malloc/free implementation, especially for multi-threaded\napplications. Contains tcmalloc, heap-checker, heap-profiler, and cpu-\nprofiler.",
            "name": "gperftools"
        },
        {
            "description": "The Julia Language: A fresh approach to technical computing",
            "name": "julia"
        },
        {
            "description": "Mesa is an open-source implementation of the OpenGL specification - a\nsystem for rendering interactive 3D graphics.",
            "name": "mesa"
        },
        {
            "description": "Free, lightweight, scalable C++ library for finite element methods.",
            "name": "mfem"
        },
        {
            "description": "mpiP: Lightweight, Scalable MPI Profiling",
            "name": "mpip"
        },
        {
            "description": "A Sampling Profiler for Python.",
            "name": "py-py-spy"
        },
        {
            "description": "SWI-Prolog is a versatile implementation of the Prolog language.\nAlthough SWI-Prolog gained its popularity primarily in education, its\ndevelopment is mostly driven by the needs for application development.\nThis is facilitated by a rich interface to other IT components by\nsupporting many document types and (network) protocols as well as a\ncomprehensive low-level interface to C that is the basis for high-level\ninterfaces to C++, Java (bundled), C#, Python, etc (externally\navailable). Data type extensions such as dicts and strings as well as\nfull support for Unicode and unbounded integers simplify smooth exchange\nof data with other components.",
            "name": "swipl"
        }
    ],
    "description": "A portable and efficient C programming interface (API) to determine the\ncall-chain of a program.\n",
    "homepage": "https://www.nongnu.org/libunwind/",
    "latest_version": "1.8.1",
    "maintainers": [
        "mwkrentel"
    ],
    "name": "libunwind",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": false,
            "description": "Block signals before performing mutex operations",
            "name": "block_signals"
        },
        {
            "default": "autotools",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "none",
            "description": "Build specified libunwind libraries",
            "name": "components"
        },
        {
            "default": false,
            "description": "Validate all memory addresses before use",
            "name": "conservative_checks"
        },
        {
            "default": false,
            "description": "Use libunwind to handle C++ exceptions",
            "name": "cxx_exceptions"
        },
        {
            "default": false,
            "description": "Turn on debug support (slows down execution)",
            "name": "debug"
        },
        {
            "default": false,
            "description": "Load the \".debug_frame\" section if available",
            "name": "debug_frame"
        },
        {
            "default": true,
            "description": "Build man page",
            "name": "docs"
        },
        {
            "default": "shared,static",
            "description": "Build shared libs, static libs or both",
            "name": "libs"
        },
        {
            "default": false,
            "description": "Compile with position independent code.",
            "name": "pic"
        },
        {
            "default": true,
            "description": "Build tests",
            "name": "tests"
        },
        {
            "default": true,
            "description": "Provide the weak 'backtrace' symbol",
            "name": "weak_backtrace"
        },
        {
            "default": false,
            "description": "Support xz (lzma) compressed symbol tables.",
            "name": "xz"
        },
        {
            "default": false,
            "description": "Support zlib compressed symbol tables (1.5 and later).",
            "name": "zlib"
        }
    ],
    "versions": [
        {
            "branch": "master",
            "name": "master"
        },
        {
            "branch": "v1.8-stable",
            "name": "1.8-stable"
        },
        {
            "name": "1.8.1",
            "sha256": "ddf0e32dd5fafe5283198d37e4bf9decf7ba1770b6e7e006c33e6df79e6a6157"
        },
        {
            "branch": "v1.7-stable",
            "name": "1.7-stable"
        },
        {
            "name": "1.7.2",
            "sha256": "a18a6a24307443a8ace7a8acc2ce79fbbe6826cd0edf98d6326d0225d6a5d6e6"
        },
        {
            "branch": "v1.6-stable",
            "name": "1.6-stable"
        },
        {
            "name": "1.6.2",
            "sha256": "4a6aec666991fb45d0889c44aede8ad6eb108071c3554fcdff671f9c94794976"
        },
        {
            "name": "1.5.0",
            "sha256": "90337653d92d4a13de590781371c604f9031cdb50520366aa1e3a91e1efb1017"
        },
        {
            "name": "1.4.0",
            "sha256": "df59c931bd4d7ebfd83ee481c943edf015138089b8e50abed8d9c57ba9338435"
        },
        {
            "name": "1.3.1",
            "sha256": "43997a3939b6ccdf2f669b50fdb8a4d3205374728c2923ddc2354c65260214f8"
        },
        {
            "name": "1.2.1",
            "sha256": "3f3ecb90e28cbe53fba7a4a27ccce7aad188d3210bb1964a923a731a27a75acb"
        }
    ],
    "versions_deprecated": []
}