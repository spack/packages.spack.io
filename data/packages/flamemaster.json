{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "Bison is a general-purpose parser generator that converts an annotated\ncontext-free grammar into a deterministic LR or generalized LR (GLR)\nparser employing LALR(1) parser tables.",
            "name": "bison"
        },
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "blas"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "Flex is a tool for generating scanners.",
            "name": "flex"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "lapack"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        }
    ],
    "dependent_to": [],
    "description": " FlameMaster is an open source C++ program package for 0D combustion and\n1D laminar flame calculations. FlameMaster is written by Heinz Pitsch.\n",
    "homepage": "https://www.itv.rwth-aachen.de/downloads/flamemaster/",
    "latest_version": "4.3.1",
    "maintainers": [
        "amd-toolchain-support"
    ],
    "name": "flamemaster",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": true,
            "description": "Compile with bilinear interpolationfor collision integrals (omega)",
            "name": "bilin_omega"
        },
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "The build type to build",
            "name": "build_type"
        },
        {
            "default": false,
            "description": "Integrate comustion librariesfor kinetics, thermodynamics, and transport",
            "name": "combustion"
        },
        {
            "default": false,
            "description": "Dynamically allocate memory for the dco tape",
            "name": "dco_chunk_tape"
        },
        {
            "default": false,
            "description": "Build with EG lib",
            "name": "eglib"
        },
        {
            "default": false,
            "description": "Build with Eigen Integration",
            "name": "eigen"
        },
        {
            "default": true,
            "description": "Used to modify the installation directories",
            "name": "flamemaster_prefix"
        },
        {
            "default": false,
            "description": "Specify boundary conditions as velocity [m/s]or massflux in Counterflow (Physical Coord.)",
            "name": "flux_bc"
        },
        {
            "default": false,
            "description": "Compile optional fortran code like dassl, the adiabaticflame temperature module, and a mechanism converter tool",
            "name": "fortran_code"
        },
        {
            "default": false,
            "description": "Compile with multi-component diffusion",
            "name": "full_diffusion"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "Enable -prof-gen and -prof-use",
            "name": "intel_prof"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": false,
            "description": "Debug mode during development(Johannes Lotz)",
            "name": "jl_debug"
        },
        {
            "default": false,
            "description": "Write Lewis numbers at every grid point",
            "name": "local_lewis"
        },
        {
            "default": false,
            "description": "Compile with time measurement of each Newton step",
            "name": "newton_perf"
        },
        {
            "default": true,
            "description": "Build with OpenMP",
            "name": "openmp"
        },
        {
            "default": true,
            "description": "Fast computation of reaction rates.",
            "name": "opt_reaction_rates"
        },
        {
            "default": false,
            "description": "Include code for Optima++ features",
            "name": "optima"
        },
        {
            "default": true,
            "description": "Use upwind scheme for the convective term.",
            "name": "prem_upwind_convec"
        },
        {
            "default": false,
            "description": "Compile the new ScanMan",
            "name": "scanmannew"
        },
        {
            "default": false,
            "description": "WITH SIMD_KINETICS",
            "name": "simd_kinetics"
        },
        {
            "default": false,
            "description": "Solve the soot Moments equation with logarithms",
            "name": "solve_mom_log"
        },
        {
            "default": true,
            "description": "Counter flow diffusion flame implementation includesa solution of the mixture fraction equation",
            "name": "solve_with_z"
        },
        {
            "default": false,
            "description": "Soot library with moment equation solving",
            "name": "soot_lib"
        },
        {
            "default": true,
            "description": "with sundials",
            "name": "sundials"
        },
        {
            "default": false,
            "description": "Only for troubleshooting",
            "name": "sundials_diagnos"
        },
        {
            "default": false,
            "description": "No hints on how FlameMaster can install sundials.",
            "name": "sundials_hint"
        },
        {
            "default": false,
            "description": "Link LAPACK in sundials",
            "name": "sundials_lapack"
        },
        {
            "default": false,
            "description": "Do not search for IDAS (part of sundials).",
            "name": "sundials_no_idas_search"
        },
        {
            "default": true,
            "description": "Use static linking for sundials libraries",
            "name": "sundials_use_static_lib"
        },
        {
            "default": false,
            "description": "Install google-test framework for unit testsand enable units tests.",
            "name": "tests"
        },
        {
            "default": true,
            "description": "Compile third party libraries and tools in build diretory",
            "name": "third_party_in_build_dir"
        },
        {
            "default": false,
            "description": "FlameMaster mechanism format allows for specifyingan additional parameter. This option disables the use of theparamter which is currently required to run adjoint sensitivity analysis.",
            "name": "troe"
        }
    ],
    "versions": [
        {
            "name": "4.3.1",
            "sha256": "8ff382f098e44a7978fe1bcc688272d65f0b374487af4523d94cca983dc57378"
        }
    ],
    "versions_deprecated": []
}