{
    "aliases": [],
    "build_system": "RPackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "R is 'GNU S', a freely available language and environment for\nstatistical computing and graphics which provides a wide variety of\nstatistical and graphical techniques: linear and nonlinear modelling,\nstatistical tests, time series analysis, classification, clustering,\netc. Please consult the R project homepage for further information.",
            "name": "r"
        },
        {
            "description": "Easy Pre and Post Assertions. An extension to stopifnot() that makes it\neasy to declare the pre and post conditions that you code should\nsatisfy, while also producing friendly error messages so that your users\nknow what's gone wrong.",
            "name": "r-assertthat"
        },
        {
            "description": "Freezing Python Dependencies Inside Bioconductor Packages. Installs a\nself-contained conda instance that is managed by the R/Bioconductor\ninstallation machinery. This aims to provide a consistent Python\nenvironment that can be used reliably by Bioconductor packages.\nFunctions are also provided to enable smooth interoperability of\nmultiple Python environments in a single R session.",
            "name": "r-basilisk"
        },
        {
            "description": "Fast Truncated Singular Value Decomposition and Principal Components\nAnalysis for Large Dense and Sparse Matrices. Fast and memory efficient\nmethods for truncated singular value decomposition and principal\ncomponents analysis of large sparse and dense matrices.",
            "name": "r-irlba"
        },
        {
            "description": "Seamless R and C++ Integration. The 'Rcpp' package provides R functions\nas well as C++ classes which; offer a seamless integration of R and C++.\nMany R data types and objects can be; mapped back and forth to C++\nequivalents which facilitates both writing of new; code as well as\neasier integration of third-party libraries. Documentation; about 'Rcpp'\nis provided by several vignettes included in this package, via the;\n'Rcpp Gallery' site at <https://gallery.rcpp.org>, the paper by\nEddelbuettel and; Francois (2011, <doi:10.18637/jss.v040.i08>), the book\nby Eddelbuettel (2013,; <doi:10.1007/978-1-4614-6868-4>) and the paper\nby Eddelbuettel and Balamuta (2018,;\n<doi:10.1080/00031305.2017.1375990>); see 'citation(\"Rcpp\")' for\ndetails.",
            "name": "r-rcpp"
        },
        {
            "description": "Interface to 'Python'. Interface to 'Python' modules, classes, and\nfunctions. When calling into 'Python', R data types are automatically\nconverted to their equivalent 'Python' types. When values are returned\nfrom 'Python' to R they are converted back to R types. Compatible with\nall versions of 'Python' >= 2.7.",
            "name": "r-reticulate"
        }
    ],
    "dependent_to": [
        {
            "description": "Single-Cell Analysis Toolkit for Gene Expression Data in R. A collection\nof tools for doing various analyses of single-cell RNA-seq gene\nexpression data, with a focus on quality control and visualization.",
            "name": "r-scater"
        }
    ],
    "description": "Density-Preserving Data Visualization via Non-Linear Dimensionality\nReduction. Implements the density-preserving modification to t-SNE and\nUMAP described by Narayan et al. (2020) . The non-linear dimensionality\nreduction techniques t-SNE and UMAP enable users to summarise complex\nhigh-dimensional sequencing data such as single cell RNAseq using lower\ndimensional representations. These lower dimensional representations\nenable the visualisation of discrete transcriptional states, as well as\ncontinuous trajectory (for example, in early development). However,\nthese methods focus on the local neighbourhood structure of the data. In\nsome cases, this results in misleading visualisations, where the density\nof cells in the low-dimensional embedding does not represent the\ntranscriptional heterogeneity of data in the original high-dimensional\nspace. den-SNE and densMAP aim to enable more accurate visual\ninterpretation of high-dimensional datasets by producing lower-\ndimensional embeddings that accurately represent the heterogeneity of\nthe original high-dimensional space, enabling the identification of\nhomogeneous and heterogeneous cell states. This accuracy is accomplished\nby including in the optimisation process a term which considers the\nlocal density of points in the original high-dimensional space. This can\nhelp to create visualisations that are more representative of\nheterogeneity in the original high-dimensional space.\n",
    "homepage": "https://bioconductor.org/packages/densvis",
    "latest_version": "1.10.0",
    "maintainers": [],
    "name": "r-densvis",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "generic",
            "description": "Build systems supported by the package",
            "name": "build_system"
        }
    ],
    "versions": [
        {
            "commit": "833db1fb7b2a5667575cc2e7c2fefc8360c8d7fb",
            "name": "1.10.0"
        }
    ],
    "versions_deprecated": []
}