{
    "aliases": [],
    "build_system": "PythonPackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "A new kind of Progress Bar, with real-time throughput, ETA, and very\ncool animations!",
            "name": "py-alive-progress"
        },
        {
            "description": "Autograd can automatically differentiate native Python and Numpy code.\nIt can handle a large subset of Python's features, including loops, ifs,\nrecursion and closures, and it can even take derivatives of derivatives\nof derivatives. It supports reverse-mode differentiation (a.k.a.\nbackpropagation), which means it can efficiently take gradients of\nscalar-valued functions with respect to array-valued arguments, as well\nas forward-mode differentiation, and the two can be composed\narbitrarily. The main intended application of Autograd is gradient-based\noptimization. For more information, check out the tutorial and the\nexamples directory.",
            "name": "py-autograd"
        },
        {
            "description": "Python implementation of CMA-ES Covariance Matrix Adaptation Evolution\nStr ategy for non-linear numerical optimization in Python",
            "name": "py-cma"
        },
        {
            "description": "The Cython compiler for writing C extensions for the Python language.",
            "name": "py-cython"
        },
        {
            "description": "Python @deprecated decorator to deprecate old python classes, functions\nor methods.",
            "name": "py-deprecated"
        },
        {
            "description": "Serialize all of python",
            "name": "py-dill"
        },
        {
            "description": "Matplotlib is a comprehensive library for creating static, animated, and\ninteractive visualizations in Python.",
            "name": "py-matplotlib"
        },
        {
            "description": "Fundamental package for array computing in Python.",
            "name": "py-numpy"
        },
        {
            "description": "The PyPA recommended tool for installing Python packages.",
            "name": "py-pip"
        },
        {
            "description": "Fundamental algorithms for scientific computing in Python.",
            "name": "py-scipy"
        },
        {
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages.",
            "name": "py-setuptools"
        },
        {
            "description": "A built-package format for Python.",
            "name": "py-wheel"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "A Spack managed Python virtual environment",
            "name": "python-venv"
        }
    ],
    "dependent_to": [
        {
            "description": "GPTune is an autotuning framework that relies on multitask and transfer\nlearnings to help solve the underlying black-box optimization problem\nusing Bayesian optimization methodologies.",
            "name": "gptune"
        },
        {
            "description": "Scalable asynchronous hyperparameter optimization, neural architecture\nsearch, and parallel ensemble of predictive models.",
            "name": "py-deephyper"
        }
    ],
    "description": " Multi-Objective Optimization in Python\n",
    "homepage": "https://pymoo.org",
    "latest_version": "0.6.1.3",
    "maintainers": [
        "liuyangzhuan"
    ],
    "name": "py-pymoo",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "python_pip",
            "description": "Build systems supported by the package",
            "name": "build_system"
        }
    ],
    "versions": [
        {
            "name": "0.6.1.3",
            "sha256": "ab440986cbaede547125ca9d1545781fdee94b719488de44119a86b8e9af526e"
        },
        {
            "name": "0.5.0",
            "sha256": "2fbca1716f6b45e430197ce4ce2210070fd3b6b9ec6b17bb25d98486115272c2"
        },
        {
            "name": "0.4.2",
            "sha256": "6ec382a7d29c8775088eec7f245a30fd384b42c40f230018dea0e3bcd9aabdf1"
        }
    ],
    "versions_deprecated": []
}