{
    "aliases": [],
    "build_system": "MakefilePackage",
    "conflicts": [
        {
            "description": null,
            "name": "arch=windows-None-None",
            "spec": "build_system=makefile"
        }
    ],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run time.",
            "name": "libffi"
        }
    ],
    "dependent_to": [],
    "description": "A BQN implementation in C\n",
    "homepage": "https://github.com/dzaima/CBQN",
    "latest_version": "0.7.0",
    "maintainers": [
        "ashermancinelli"
    ],
    "name": "cbqn",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "makefile",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "o3",
            "description": "Make target to use.",
            "name": "build_type"
        },
        {
            "default": true,
            "description": "Enable FFI support",
            "name": "ffi"
        },
        {
            "default": true,
            "description": "Enable built-in REPL",
            "name": "repl"
        }
    ],
    "versions": [
        {
            "branch": "develop",
            "name": "develop"
        },
        {
            "branch": "master",
            "name": "master"
        },
        {
            "name": "0.7.0",
            "tag": "v0.7.0"
        }
    ],
    "versions_deprecated": []
}