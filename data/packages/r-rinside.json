{
    "aliases": [],
    "build_system": "RPackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "R is 'GNU S', a freely available language and environment for\nstatistical computing and graphics which provides a wide variety of\nstatistical and graphical techniques: linear and nonlinear modelling,\nstatistical tests, time series analysis, classification, clustering,\netc. Please consult the R project homepage for further information.",
            "name": "r"
        },
        {
            "description": "Seamless R and C++ Integration. The 'Rcpp' package provides R functions\nas well as C++ classes which; offer a seamless integration of R and C++.\nMany R data types and objects can be; mapped back and forth to C++\nequivalents which facilitates both writing of new; code as well as\neasier integration of third-party libraries. Documentation; about 'Rcpp'\nis provided by several vignettes included in this package, via the;\n'Rcpp Gallery' site at <https://gallery.rcpp.org>, the paper by\nEddelbuettel and; Francois (2011, <doi:10.18637/jss.v040.i08>), the book\nby Eddelbuettel (2013,; <doi:10.1007/978-1-4614-6868-4>) and the paper\nby Eddelbuettel and Balamuta (2018,;\n<doi:10.1080/00031305.2017.1375990>); see 'citation(\"Rcpp\")' for\ndetails.",
            "name": "r-rcpp"
        }
    ],
    "dependent_to": [
        {
            "description": "EMEWS Queues for R (EQ/R) Installs EQ/R.",
            "name": "eq-r"
        },
        {
            "description": "LibPressio metric that runs R code",
            "name": "libpressio-rmetric"
        },
        {
            "description": "ROOT is a data analysis framework.",
            "name": "root"
        },
        {
            "description": "Turbine: The Swift/T runtime",
            "name": "turbine"
        }
    ],
    "description": "C++ Classes to Embed R in C++ (and C) Applications. C++ classes to embed\nR in C++ applications The 'RInside' packages makes it easier to have \"R\ninside\" your C++ application by providing a C++ wrapperclass providing\nthe R interpreter. As R itself is embedded into your application, a\nshared library build of R is required. This works on Linux, OS X and\neven on Windows provided you use the same tools used to build R itself.\nNumerous examples are provided in the eight subdirectories of the\nexamples/ directory of the installed package: standard, mpi (for\nparallel computing) qt (showing how to embed 'RInside' inside a Qt GUI\napplication), wt (showing how to build a \"web-application\" using the Wt\ntoolkit), armadillo (for 'RInside' use with 'RcppArmadillo') and eigen\n(for 'RInside' use with 'RcppEigen'). The example use GNUmakefile(s)\nwith GNU extensions, so a GNU make is required (and will use the\nGNUmakefile automatically). Doxygen-generated documentation of the C++\nclasses is available at the 'RInside' website as well.\n",
    "homepage": "https://cloud.r-project.org/package=RInside",
    "latest_version": "0.2.18",
    "maintainers": [],
    "name": "r-rinside",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "generic",
            "description": "Build systems supported by the package",
            "name": "build_system"
        }
    ],
    "versions": [
        {
            "name": "0.2.18",
            "sha256": "805014f0f0a364633e0e3c59100665a089bc455dec80b24f04aaec96466cb736"
        },
        {
            "name": "0.2.17",
            "sha256": "0be28c44ee34cba669a7264d2b99c289230645598ca78e21682559dc31824348"
        },
        {
            "name": "0.2.16",
            "sha256": "7ae4ade128ea05f37068d59e610822ff0b277f9d39d8900f7eb31759ad5a2a0e"
        },
        {
            "name": "0.2.15",
            "sha256": "1e1d87a3584961f3aa4ca6acd4d2f3cda26abdab027ff5be2fd5cd76a98af02b"
        },
        {
            "name": "0.2.14",
            "sha256": "8de5340993fe879ca00fa559c5b1b27b408ba78bfc5f67d36d6f0b8d8e8649cf"
        },
        {
            "name": "0.2.13",
            "sha256": "be1da861f4f8c1292f0691bce05978e409a081f24ad6006ae173a6a89aa4d031"
        }
    ],
    "versions_deprecated": []
}