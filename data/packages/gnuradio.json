{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "Mostly private use system icons.",
            "name": "adwaita-icon-theme"
        },
        {
            "description": "Boost provides free peer-reviewed portable C++ source libraries,\nemphasizing libraries that work well with the C++ Standard Library.\nBoost libraries are intended to be widely useful, and usable across a\nbroad spectrum of applications. The Boost license encourages both\ncommercial and non-commercial use.",
            "name": "boost"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "Cairo is a 2D graphics library with support for multiple output devices.",
            "name": "cairo"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "C++ binding for 0MQ",
            "name": "cppzmq"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "FFTW is a C subroutine library for computing the discrete Fourier\ntransform (DFT) in one or more dimensions, of arbitrary input size, and\nof both real and complex data (as well as of even/odd data, i.e. the\ndiscrete cosine/sine transforms or DCT/DST). We believe that FFTW, which\nis free software, should become the FFT library of choice for most\napplications.",
            "name": "fftw"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "GMP is a free library for arbitrary precision arithmetic, operating on\nsigned integers, rational numbers, and floating-point numbers.",
            "name": "gmp"
        },
        {
            "description": "gsettings-desktop-schemas contains a collection of GSettings schemas for\nsettings shared by various components of a desktop.",
            "name": "gsettings-desktop-schemas"
        },
        {
            "description": "The GNU Scientific Library (GSL) is a numerical library for C and C++\nprogrammers. It is free software under the GNU General Public License.\nThe library provides a wide range of mathematical routines such as\nrandom number generators, special functions and least-squares fitting.\nThere are over 1000 functions in total with an extensive test suite.",
            "name": "gsl"
        },
        {
            "description": "icon-theme contains the standard also references the default icon theme\ncalled hicolor.",
            "name": "hicolor-icon-theme"
        },
        {
            "description": "Log4cpp is library of C++ classes for flexible logging to files, syslog,\nIDSA and other destinations. It is modeled after the Log4j Java library,\nstaying as close to their API as is reasonable.",
            "name": "log4cpp"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        },
        {
            "description": "Python composable command line interface toolkit.",
            "name": "py-click"
        },
        {
            "description": "An extension module for py-click to register external CLI commands via\nsetuptools entry-points.",
            "name": "py-click-plugins"
        },
        {
            "description": "Fundamental package for array computing in Python.",
            "name": "py-numpy"
        },
        {
            "description": "bindings for the GLib, and GObject, to be used in Python.",
            "name": "py-pygobject"
        },
        {
            "description": "PyQt is a set of Python v2 and v3 bindings for The Qt Company's Qt\napplication framework and runs on all platforms supported by Qt\nincluding Windows, OS X, Linux, iOS and Android. PyQt5 supports Qt v5.",
            "name": "py-pyqt5"
        },
        {
            "description": "PyYAML is a YAML parser and emitter for Python.",
            "name": "py-pyyaml"
        },
        {
            "description": "Python 2 and 3 compatibility utilities.",
            "name": "py-six"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "A Spack managed Python virtual environment",
            "name": "python-venv"
        },
        {
            "description": "The Qwt library contains GUI Components and utility classes which are\nprimarily useful for programs with a technical background. Beside a\nframework for 2D plots it provides scales, sliders, dials, compasses,\nthermometers, wheels and knobs to control or display values, arrays, or\nranges of type double.",
            "name": "qwt"
        },
        {
            "description": "SWIG is an interface compiler that connects programs written in C and\nC++ with scripting languages such as Perl, Python, Ruby, and Tcl. It\nworks by taking the declarations found in C/C++ header files and using\nthem to generate the wrapper code that scripting languages need to\naccess the underlying C/C++ code. In addition, SWIG provides a variety\nof customization features that let you tailor the wrapping process to\nsuit your application.",
            "name": "swig"
        },
        {
            "description": "VOLK is the Vector-Optimized Library of Kernels. It is a library that\ncontains kernels of hand-written SIMD code for different mathematical\noperations. Since each SIMD architecture can be very different and no\ncompiler has yet come along to handle vectorization properly or highly\nefficiently, VOLK approaches the problem differently. For each\narchitecture or platform that a developer wishes to vectorize for, a new\nproto-kernel is added to VOLK. At runtime, VOLK will select the correct\nproto-kernel. In this way, the users of VOLK call a kernel for\nperforming the operation that is platform/architecture agnostic. This\nallows us to write portable SIMD code.",
            "name": "volk"
        }
    ],
    "dependent_to": [
        {
            "description": "Gqrx is an open source software defined radio (SDR) receiver implemented\nusing GNU Radio and the Qt GUI toolkit. Currently it works on Linux and\nMac with hardware supported by gr-osmosdr, including Funcube Dongle,\nRTL-SDR, Airspy, HackRF, BladeRF, RFSpace, USRP and SoapySDR. Gqrx can\noperate as an AM/FM/SSB receiver with audio output or as an FFT-only\ninstrument. There are also various hooks for interacting with external\napplication using nertwork sockets.",
            "name": "gqrx"
        },
        {
            "description": "While primarily being developed for the OsmoSDR hardware, this block as\nwell supports: FunCube Dongle through libgnuradio-fcd, FUNcube Dongle\nPro+ through gr-fcdproplus, sysmocom OsmoSDR Devices through libosmosdr,\nNuand LLC bladeRF through libbladeRF library, Great Scott Gadgets HackRF\nthrough libhackrf, Ettus USRP Devices through Ettus UHD library,\nFairwaves UmTRX through Fairwaves' fork of Ettus' UHD library, RFSPACE\nSDR-IQ, SDR-IP, NetSDR (incl. X2 option), RTL2832U based DVB-T dongles\nthrough librtlsdr, RTL-TCP spectrum server (see librtlsdr project),\nMSi2500 based DVB-T dongles through libmirisdr, SDRplay RSP through\nSDRplay API library, AirSpy R820t dongles through libairspy, gnuradio\n.cfile input through libgnuradio-blocks",
            "name": "gr-osmosdr"
        }
    ],
    "description": "GNU Radio is a free & open-source software development toolkit that\nprovides signal processing blocks to implement software radios. It can\nbe used with readily-available, low-cost external RF hardware to create\nsoftware-defined radios, or without hardware in a simulation-like\nenvironment. It is widely used in hobbyist, academic, and commercial\nenvironments to support both wireless communications research and real-\nworld radio systems.\n",
    "homepage": "https://www.gnuradio.org/",
    "latest_version": "3.8.2.0",
    "maintainers": [
        "aweits"
    ],
    "name": "gnuradio",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "Build with gui support",
            "name": "gui"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        }
    ],
    "versions": [
        {
            "name": "3.8.2.0",
            "sha256": "ddda12b55e3e1d925eefb24afb9d604bca7c9bbe0a431707aa48a2eed53eec2f"
        }
    ],
    "versions_deprecated": []
}