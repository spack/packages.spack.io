{
    "aliases": [],
    "build_system": "RPackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "R is 'GNU S', a freely available language and environment for\nstatistical computing and graphics which provides a wide variety of\nstatistical and graphical techniques: linear and nonlinear modelling,\nstatistical tests, time series analysis, classification, clustering,\netc. Please consult the R project homepage for further information.",
            "name": "r"
        },
        {
            "description": "Seamless R and C++ Integration. The 'Rcpp' package provides R functions\nas well as C++ classes which; offer a seamless integration of R and C++.\nMany R data types and objects can be; mapped back and forth to C++\nequivalents which facilitates both writing of new; code as well as\neasier integration of third-party libraries. Documentation; about 'Rcpp'\nis provided by several vignettes included in this package, via the;\n'Rcpp Gallery' site at <https://gallery.rcpp.org>, the paper by\nEddelbuettel and; Francois (2011, <doi:10.18637/jss.v040.i08>), the book\nby Eddelbuettel (2013,; <doi:10.1007/978-1-4614-6868-4>) and the paper\nby Eddelbuettel and Balamuta (2018,;\n<doi:10.1080/00031305.2017.1375990>); see 'citation(\"Rcpp\")' for\ndetails.",
            "name": "r-rcpp"
        },
        {
            "description": "'Rcpp' Integration for the 'Armadillo' Templated Linear Algebra Library.\n'Armadillo' is a templated C++ linear algebra library (by Conrad;\nSanderson) that aims towards a good balance between speed and ease of;\nuse. Integer, floating point and complex numbers are supported, as; well\nas a subset of trigonometric and statistics functions. Various; matrix\ndecompositions are provided through optional integration with; LAPACK\nand ATLAS libraries. The 'RcppArmadillo' package includes the; header\nfiles from the templated 'Armadillo' library. Thus users do; not need to\ninstall 'Armadillo' itself in order to use; 'RcppArmadillo'. From\nrelease 7.800.0 on, 'Armadillo' is licensed; under Apache License 2;\nprevious releases were under licensed as MPL; 2.0 from version 3.800.0\nonwards and LGPL-3 prior to that",
            "name": "r-rcpparmadillo"
        }
    ],
    "dependent_to": [
        {
            "description": "Parametric Time Warping. Parametric Time Warping aligns patterns, i.e.\nit aims to put corresponding features at the same locations. The\nalgorithm searches for an optimal polynomial describing the warping. It\nis possible to align one sample to a reference, several samples to the\nsame reference, or several samples to several references. One can choose\nbetween calculating individual warpings, or one global warping for a set\nof samples and one reference. Two optimization criteria are implemented:\nRMS (Root Mean Square error) and WCC (Weighted Cross Correlation). Both\nwarping of peak profiles and of peak lists are supported. A vignette for\nthe latter is contained in the inst/doc directory of the source package\n- the vignette source can be found on the package github site.",
            "name": "r-ptw"
        }
    ],
    "description": "Global Optimization by Differential Evolution in C++. An efficient C++\nbased implementation of the 'DEoptim' function which performs global\noptimization by differential evolution. Its creation was motivated by\ntrying to see if the old approximation \"easier, shorter, faster: pick\nany two\" could in fact be extended to achieving all three goals while\nmoving the code from plain old C to modern C++. The initial version did\nin fact do so, but a good part of the gain was due to an implicit code\nreview which eliminated a few inefficiencies which have since been\neliminated in 'DEoptim'.\n",
    "homepage": "https://cloud.r-project.org/package=RcppDE",
    "latest_version": "0.1.7",
    "maintainers": [],
    "name": "r-rcppde",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "generic",
            "description": "Build systems supported by the package",
            "name": "build_system"
        }
    ],
    "versions": [
        {
            "name": "0.1.7",
            "sha256": "4a238ee97e574cb44b12e4962b9927dd811f087fc13fc777637ec6fe12bd86a0"
        },
        {
            "name": "0.1.6",
            "sha256": "c9386709f72cdc33505b3ac675c173013fe098434b7c21bc09eb625b529132c5"
        }
    ],
    "versions_deprecated": []
}