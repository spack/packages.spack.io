{
    "aliases": [],
    "build_system": "AutotoolsPackage",
    "conflicts": [
        {
            "description": null,
            "name": "arch=darwin-None-None",
            "spec": ""
        },
        {
            "description": null,
            "name": "arch=windows-None-None",
            "spec": "build_system=autotools"
        }
    ],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "The GNU config.guess and config.sub scripts versioned by timestamp.\nThis package can be used as a build dependency for autotools packages\nthat ship a tarball with outdated config.guess and config.sub files.",
            "name": "gnuconfig"
        },
        {
            "description": "IBM MPI implementation from Spectrum MPI.",
            "name": "mpi"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "A portable and efficient C programming interface (API) to determine the\ncall-chain of a program.",
            "name": "unwind"
        }
    ],
    "dependent_to": [],
    "description": "mpiP: Lightweight, Scalable MPI Profiling\n",
    "homepage": "https://software.llnl.gov/mpiP/",
    "latest_version": "3.5",
    "maintainers": [
        "cchambreau"
    ],
    "name": "mpip",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": false,
            "description": "Add shared make target",
            "name": "add_shared_target"
        },
        {
            "default": true,
            "description": "Enable GNU binutils libbfd for source lookup",
            "name": "bfd"
        },
        {
            "default": "autotools",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": true,
            "description": "Build with demangling support",
            "name": "demangling"
        },
        {
            "default": "3",
            "description": "Specify number of internal stack frames",
            "name": "internal_stackdepth"
        },
        {
            "default": true,
            "description": "Use libunwind togenerate stack trace",
            "name": "libunwind"
        },
        {
            "default": "32",
            "description": "Set number of command line arguments in report",
            "name": "maxargs"
        },
        {
            "default": true,
            "description": "Enable MPI-I/O reporting",
            "name": "mpi_io"
        },
        {
            "default": true,
            "description": "Enable MPI non-blocking collective reporting",
            "name": "mpi_nbc"
        },
        {
            "default": true,
            "description": "Enable MPI RMA reporting",
            "name": "mpi_rma"
        },
        {
            "default": false,
            "description": "Use setjmp to generate stack trace",
            "name": "setjmp"
        },
        {
            "default": "8",
            "description": "Specify maximum report stacktrace depth",
            "name": "stackdepth"
        }
    ],
    "versions": [
        {
            "branch": "master",
            "name": "master"
        },
        {
            "name": "3.5",
            "sha256": "e366843d53fa016fb03903e51c8aac901aa5155edabe64698a8d6fa618a03bbd"
        }
    ],
    "versions_deprecated": []
}