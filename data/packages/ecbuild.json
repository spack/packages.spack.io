{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        },
        {
            "description": "Perl 5 is a highly capable, feature-rich programming language with over\n27 years of development.",
            "name": "perl"
        }
    ],
    "dependent_to": [
        {
            "description": "The NOAA bufr-query Library can be used to read NCEP and WMO formated\nBUFR files using a simple interface that does not require the user to\nknow the details of the BUFR format. Detailed documentation for the BUFR\nLibrary can be found at https://bufr-\nquery.readthedocs.io/en/latest/index.html",
            "name": "bufr-query"
        },
        {
            "description": "The Community Radiative Transfer Model (CRTM) package. The CRTM is\ncomposed of four important modules for gaseous transmittance, surface\nemission and reflection, cloud and aerosol absorption and scattering,\nand a solver for a radiative transfer.",
            "name": "crtm"
        },
        {
            "description": "ecCodes is a package developed by ECMWF for processing meteorological\ndata in GRIB (1/2), BUFR (3/4) and GTS header formats.",
            "name": "eccodes"
        },
        {
            "description": "ecKit is a cross-platform c++ toolkit that supports development of tools\nand applications at ECMWF.",
            "name": "eckit"
        },
        {
            "description": "A library for numerical weather prediction and climate modelling.",
            "name": "ecmwf-atlas"
        },
        {
            "description": "Ectrans is the global spherical Harmonics transforms library, extracted\nfrom the IFS. It is using a hybrid of MPI and OpenMP parallelisation\nstrategies. The package contains both single- and double precision\nFortran libraries (trans_sp, trans_dp), as well as a C interface to the\ndouble-precision version (transi_dp).",
            "name": "ectrans"
        },
        {
            "description": "A Fortran toolkit for interoperating Fortran with C/C++.",
            "name": "fckit"
        },
        {
            "description": "FDB (Fields DataBase) is a domain-specific object store developed at\nECMWF for storing, indexing and retrieving GRIB data.",
            "name": "fdb"
        },
        {
            "description": "FIAT (Fortran IFS and Arpege Toolkit) is a collection of selected\nFortran utility libraries, extracted from the IFS/Arpege model.",
            "name": "fiat"
        },
        {
            "description": "GSIbec: Extracts the background error covariance (BEC) model\ncapabilities from the Gridpoint Statistical Interpolation (GSI)\natmospheric analysis system into a library of its own.",
            "name": "gsibec"
        },
        {
            "description": "MAPL is a foundation layer of the GEOS architecture, whose original\npurpose is to supplement the Earth System Modeling Framework (ESMF).\nMAPL fills in missing capabilities of ESMF, provides higher-level\ninterfaces for common boiler-plate logic, and enforces various\ncomponentization conventions across ESMF gridded components within GEOS.",
            "name": "mapl"
        },
        {
            "description": "Toolkit for manipulating and describing meteorological objects,\nimplementing the MARS language and associated processing and semantics.",
            "name": "metkit"
        },
        {
            "description": "ECMWF encoding and decoding of observational data in ODB2 format.",
            "name": "odc"
        }
    ],
    "description": "ecBuild is the ECMWF build system. It is built on top of CMake and\nconsists of a set of macros as well as a wrapper around CMake\n",
    "homepage": "https://github.com/ecmwf/ecbuild",
    "latest_version": "3.7.2",
    "maintainers": [
        "climbfuji",
        "skosukhin",
        "victoria-cherkas"
    ],
    "name": "ecbuild",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": false,
            "description": "Apply patching for FISMA-high compliance",
            "name": "fismahigh"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        }
    ],
    "versions": [
        {
            "name": "3.7.2",
            "sha256": "7a2d192cef1e53dc5431a688b2e316251b017d25808190faed485903594a3fb9"
        },
        {
            "name": "3.6.5",
            "sha256": "98bff3d3c269f973f4bfbe29b4de834cd1d43f15b1c8d1941ee2bfe15e3d4f7f"
        },
        {
            "name": "3.6.1",
            "sha256": "796ccceeb7af01938c2f74eab0724b228e9bf1978e32484aa3e227510f69ac59"
        }
    ],
    "versions_deprecated": []
}