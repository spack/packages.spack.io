{
    "aliases": [],
    "build_system": "PythonPackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "A Python module for distributed just-in-time shared library building",
            "name": "py-fenics-dijitso"
        },
        {
            "description": "The FInite element Automatic Tabulator FIAT supports generation of\narbitrary order instances of the Lagrange elements on lines, triangles,\nand tetrahedra. It is also capable of generating arbitrary order\ninstances of Jacobi-type quadrature rules on the same element shapes.\nFurther, H(div) and H(curl) conforming finite element spaces such as the\nfamilies of Raviart-Thomas, Brezzi-Douglas-Marini and Nedelec are\nsupported on triangles and tetrahedra. Upcoming versions will also\nsupport Hermite and nonconforming elements",
            "name": "py-fenics-fiat"
        },
        {
            "description": "Instant is a Python module that allows for instant inlining of C and C++\ncode in Python. It is a small Python module built on top of SWIG and\nDistutils. Instant has been retired after 2017.2.0 release. It is no\nlonger needed in FEniCS and hence no longer maintained and tested.",
            "name": "py-fenics-instant"
        },
        {
            "description": "The Unified Form Language (UFL) is a domain specific language for\ndeclaration of finite element discretizations of variational forms. More\nprecisely, it defines a flexible interface for choosing finite element\nspaces and defining expressions for weak forms in a notation close to\nmathematical notation.",
            "name": "py-fenics-ufl"
        },
        {
            "description": "The Unified Form Language (UFL) is a domain specific language for\ndeclaration of finite element discretizations of variational forms. More\nprecisely, it defines a flexible interface for choosing finite element\nspaces and defining expressions for weak forms in a notation close to\nmathematical notation.",
            "name": "py-fenics-ufl-legacy"
        },
        {
            "description": "Fundamental package for array computing in Python.",
            "name": "py-numpy"
        },
        {
            "description": "The PyPA recommended tool for installing Python packages.",
            "name": "py-pip"
        },
        {
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages.",
            "name": "py-setuptools"
        },
        {
            "description": "A built-package format for Python.",
            "name": "py-wheel"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "A Spack managed Python virtual environment",
            "name": "python-venv"
        }
    ],
    "dependent_to": [
        {
            "description": "FEniCS is organized as a collection of interoperable components that\ntogether form the FEniCS Project. These components include the problem-\nsolving environment DOLFIN, the form compiler FFC, the finite element\ntabulator FIAT, the just-in-time compiler Instant / Dijitso, the code\ngeneration interface UFC, the form language UFL and a range of\nadditional components.",
            "name": "fenics"
        }
    ],
    "description": "The FEniCS Form Compiler FFC is a compiler for finite element\nvariational forms, translating high-level mathematical descriptions of\nvariational forms into efficient low-level C++ code for finite element\nassembly.\n",
    "homepage": "https://fenicsproject.org/",
    "latest_version": "2019.1.0.post0",
    "maintainers": [
        "emai-imcs"
    ],
    "name": "py-fenics-ffc",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "python_pip",
            "description": "Build systems supported by the package",
            "name": "build_system"
        }
    ],
    "versions": [
        {
            "branch": "master",
            "name": "master"
        },
        {
            "name": "2019.1.0.post0",
            "sha256": "306e1179630200a34202975a5369194939b3482eebfc34bc44ad74dab1f109e8"
        },
        {
            "name": "2018.1.0",
            "sha256": "c5a6511693106d1cd2fc013148d0cd01cd1b99fc65dab461ca0b95851a9ea271"
        },
        {
            "name": "2017.2.0.post0",
            "sha256": "1969a5460cb866c478df64874ce213f81cb5c893b89f991a578e258b1a64fee5"
        },
        {
            "name": "2016.2.0",
            "sha256": "097c284780447ea7bb47d4d51956648a1efb2cb9047eb1382944421dde351ecb"
        }
    ],
    "versions_deprecated": []
}