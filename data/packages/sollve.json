{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [
        {
            "description": null,
            "name": "%gcc@:5.0",
            "spec": ""
        },
        {
            "description": null,
            "name": "+omp_tsan",
            "spec": ""
        },
        {
            "description": null,
            "name": "+lldb",
            "spec": "~clang"
        }
    ],
    "dependencies": [
        {
            "description": "Argobots, which was developed as a part of the Argo project, is a\nlightweight runtime system that supports integrated computation and data\nmovement with massive concurrency. It will directly leverage the lowest-\nlevel constructs in the hardware and OS: lightweight notification\nmechanisms, data movement engines, memory mapping, and data placement\nstrategies. It consists of an execution model and a memory model.",
            "name": "argobots"
        },
        {
            "description": "GNU binutils, which contain the linker, assembler, objdump and others",
            "name": "binutils"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "An autotools compatible port of the NetBSD editline library",
            "name": "libedit"
        },
        {
            "description": "The ncurses (new curses) library is a free software emulation of curses\nin System V Release 4.0, and more. It uses terminfo format, supports\npads and color and multiple highlights and forms characters and\nfunction-key mapping, and has all the other SYSV-curses enhancements\nover BSD curses.",
            "name": "ncurses"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        },
        {
            "description": "Stringified perl data structures, suitable for both printing and eval",
            "name": "perl-data-dumper"
        },
        {
            "description": "Python 2 and 3 compatibility utilities.",
            "name": "py-six"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "A Spack managed Python virtual environment",
            "name": "python-venv"
        },
        {
            "description": "SWIG is an interface compiler that connects programs written in C and\nC++ with scripting languages such as Perl, Python, Ruby, and Tcl. It\nworks by taking the declarations found in C/C++ header files and using\nthem to generate the wrapper code that scripting languages need to\naccess the underlying C/C++ code. In addition, SWIG provides a variety\nof customization features that let you tailor the wrapping process to\nsuit your application.",
            "name": "swig"
        }
    ],
    "dependent_to": [],
    "description": "The SOLLVE Project aims at scaling OpenMP by leveraging LLVM for\nexascale performance and portability of applications. This package\nprovides a collection of Clang/LLVM compilers and an OpenMP runtime\nlibrary.\n",
    "homepage": "https://www.bnl.gov/compsci/projects/SOLLVE/",
    "latest_version": "1.0a2",
    "maintainers": [],
    "name": "sollve",
    "patches": [
        {
            "level": 1,
            "owner": "builtin.sollve",
            "relative_path": "disable_unused_lock.patch",
            "reverse": false,
            "sha256": "ef1f371a81574fd1e6170599240f8433e19c110b653883553465ac43533b2eb6",
            "version": "@1.0a2",
            "working_dir": "projects/openmp"
        }
    ],
    "resources": [
        {
            "destination": "projects",
            "name": "compiler-rt",
            "placement": "compiler-rt",
            "version": "@develop+compiler-rt"
        },
        {
            "destination": "projects",
            "name": "openmp",
            "placement": "openmp",
            "version": "@develop+clang"
        },
        {
            "destination": "tools",
            "name": "cfe",
            "placement": "clang",
            "version": "@develop+clang"
        },
        {
            "destination": "tools",
            "name": "polly",
            "placement": "polly",
            "version": "@develop+polly"
        },
        {
            "destination": "projects",
            "name": "libcxx",
            "placement": "libcxx",
            "version": "@develop+libcxx"
        },
        {
            "destination": "projects",
            "name": "libcxxabi",
            "placement": "libcxxabi",
            "version": "@develop+libcxx"
        },
        {
            "destination": "tools",
            "name": "lldb",
            "placement": "lldb",
            "version": "@develop+lldb"
        },
        {
            "destination": "tools",
            "name": "lld",
            "placement": "lld",
            "version": "@develop+lld"
        },
        {
            "destination": "projects",
            "name": "libunwind",
            "placement": "libunwind",
            "version": "@develop+internal_unwind"
        },
        {
            "destination": "projects",
            "name": "compiler-rt",
            "placement": "compiler-rt",
            "version": "@1.0a2+compiler-rt"
        },
        {
            "destination": "projects",
            "name": "openmp",
            "placement": "openmp",
            "version": "@1.0a2+clang"
        },
        {
            "destination": "tools",
            "name": "cfe",
            "placement": "clang",
            "version": "@1.0a2+clang"
        },
        {
            "destination": "tools",
            "name": "polly",
            "placement": "polly",
            "version": "@1.0a2+polly"
        },
        {
            "destination": "projects",
            "name": "libcxx",
            "placement": "libcxx",
            "version": "@1.0a2+libcxx"
        },
        {
            "destination": "projects",
            "name": "libcxxabi",
            "placement": "libcxxabi",
            "version": "@1.0a2+libcxx"
        },
        {
            "destination": "tools",
            "name": "lldb",
            "placement": "lldb",
            "version": "@1.0a2+lldb"
        },
        {
            "destination": "tools",
            "name": "lld",
            "placement": "lld",
            "version": "@1.0a2+lld"
        },
        {
            "destination": "projects",
            "name": "libunwind",
            "placement": "libunwind",
            "version": "@1.0a2+internal_unwind"
        }
    ],
    "variants": [
        {
            "default": false,
            "description": "Build all supported targets, default targets <current arch>,NVPTX,AMDGPU,CppBackend",
            "name": "all_targets"
        },
        {
            "default": true,
            "description": "Use Argobots in BOLT",
            "name": "argobots"
        },
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": true,
            "description": "Build the LLVM C/C++/Objective-C compiler frontend",
            "name": "clang"
        },
        {
            "default": true,
            "description": "Build LLVM compiler runtime, including sanitizers",
            "name": "compiler-rt"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": true,
            "description": "Add support for LTO with the gold linker plugin",
            "name": "gold"
        },
        {
            "default": true,
            "description": "Build the libcxxabi libunwind",
            "name": "internal_unwind"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": true,
            "description": "Build the LLVM C++ standard library",
            "name": "libcxx"
        },
        {
            "default": false,
            "description": "Build and link the libLLVM shared library rather than static",
            "name": "link_dylib"
        },
        {
            "default": true,
            "description": "Build the LLVM linker",
            "name": "lld"
        },
        {
            "default": true,
            "description": "Build the LLVM debugger",
            "name": "lldb"
        },
        {
            "default": false,
            "description": "Build with OpenMP capable thread sanitizer",
            "name": "omp_tsan"
        },
        {
            "default": true,
            "description": "Build the LLVM polyhedral optimization plugin",
            "name": "polly"
        },
        {
            "default": false,
            "description": "Install python bindings",
            "name": "python"
        },
        {
            "default": false,
            "description": "Build all components as shared libraries, faster, less memory to build, less stable",
            "name": "shared_libs"
        }
    ],
    "versions": [],
    "versions_deprecated": [
        {
            "name": "develop"
        },
        {
            "commit": "cb4343bda9e57076a74dee23236ac9737e07594f",
            "name": "1.0a2"
        }
    ]
}