{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "blas"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "ecBuild is the ECMWF build system. It is built on top of CMake and\nconsists of a set of macros as well as a wrapper around CMake",
            "name": "ecbuild"
        },
        {
            "description": "NVPL FFT (NVIDIA Performance Libraries FFT) is part of NVIDIA\nPerformance Libraries and provides Fast Fourier Transform (FFT)\ncalculations on ARM CPUs.",
            "name": "fftw-api"
        },
        {
            "description": "FIAT (Fortran IFS and Arpege Toolkit) is a collection of selected\nFortran utility libraries, extracted from the IFS/Arpege model.",
            "name": "fiat"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "lapack"
        },
        {
            "description": "Intel oneAPI Math Kernel Library (Intel oneMKL; formerly Intel Math\nKernel Library or Intel MKL), is a library of optimized math routines\nfor science, engineering, and financial applications. Core math\nfunctions include BLAS, LAPACK, ScaLAPACK, sparse solvers, fast Fourier\ntransforms, and vector math. LICENSE INFORMATION: By downloading and\nusing this software, you agree to the terms and conditions of the\nsoftware license agreements at https://intel.ly/393CijO.",
            "name": "mkl"
        },
        {
            "description": "IBM MPI implementation from Spectrum MPI.",
            "name": "mpi"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        }
    ],
    "dependent_to": [
        {
            "description": "A library for numerical weather prediction and climate modelling.",
            "name": "ecmwf-atlas"
        }
    ],
    "description": "Ectrans is the global spherical Harmonics transforms library, extracted\nfrom the IFS. It is using a hybrid of MPI and OpenMP parallelisation\nstrategies. The package contains both single- and double precision\nFortran libraries (trans_sp, trans_dp), as well as a C interface to the\ndouble-precision version (transi_dp).\n",
    "homepage": "https://github.com/ecmwf-ifs/ectrans",
    "latest_version": "1.5.0",
    "maintainers": [
        "climbfuji"
    ],
    "name": "ectrans",
    "patches": [
        {
            "level": 1,
            "owner": "builtin.ectrans",
            "reverse": false,
            "sha256": "17999486a320a5c6a1a442adcdf2c341b49d005f45d09ad0e525594d50bdc39c",
            "url": "https://github.com/ecmwf-ifs/ectrans/commit/98f0d505d5b0866cab68a15e86e1a495bafd93d2.patch?full_index=1",
            "version": "@1.3.1:1.5.1",
            "working_dir": "."
        }
    ],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "RelWithDebInfo",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": true,
            "description": "Support for double precision",
            "name": "double_precision"
        },
        {
            "default": true,
            "description": "Use FFTW",
            "name": "fftw"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": false,
            "description": "Use MKL",
            "name": "mkl"
        },
        {
            "default": true,
            "description": "Use MPI",
            "name": "mpi"
        },
        {
            "default": true,
            "description": "Use OpenMP",
            "name": "openmp"
        },
        {
            "default": true,
            "description": "Support for single precision",
            "name": "single_precision"
        },
        {
            "default": true,
            "description": "Compile TransI C-interface to trans",
            "name": "transi"
        }
    ],
    "versions": [
        {
            "branch": "develop",
            "name": "develop"
        },
        {
            "branch": "main",
            "name": "main"
        },
        {
            "name": "1.5.0",
            "sha256": "8b2b24d1988b92dc3793b29142946614fca9e9c70163ee207d2a123494430fde"
        },
        {
            "name": "1.4.0",
            "sha256": "1364827511a2eb11716aaee85062c3ab0e6b5d5dca7a7b9c364e1c43482b8691"
        },
        {
            "name": "1.2.0",
            "sha256": "2ee6dccc8bbfcc23faada1d957d141f24e41bb077c1821a7bc2b812148dd336c"
        },
        {
            "name": "1.1.0",
            "sha256": "3c9848bb65033fbe6d791084ee347b3adf71d5dfe6d3c11385000017b6469a3e"
        }
    ],
    "versions_deprecated": []
}