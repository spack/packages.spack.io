{
    "aliases": [],
    "build_system": "PythonPackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "The PyPA recommended tool for installing Python packages.",
            "name": "py-pip"
        },
        {
            "description": "C version of reader, parser and emitter for ruamel.yaml derived from\nlibyaml.",
            "name": "py-ruamel-yaml-clib"
        },
        {
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages.",
            "name": "py-setuptools"
        },
        {
            "description": "A built-package format for Python.",
            "name": "py-wheel"
        },
        {
            "description": "The Python programming language.",
            "name": "python"
        },
        {
            "description": "A Spack managed Python virtual environment",
            "name": "python-venv"
        }
    ],
    "dependent_to": [
        {
            "description": "This package provides a unified command line interface to Amazon Web\nServices.",
            "name": "awscli-v2"
        },
        {
            "description": "The azureml-core contains functionality for creating and managing: *\nAzure Machine Learning workspaces, experiments and runs; * Machine\nlearning compute respources; * Models, images and web services.",
            "name": "py-azureml-core"
        },
        {
            "description": "Converts and organises raw MRI data-sets according to the Brain Imaging\nData Structure (BIDS).",
            "name": "py-bidscoin"
        },
        {
            "description": "The carputils framework for running simulations with the openCARP\nsoftware.",
            "name": "py-carputils"
        },
        {
            "description": "Command line program to validate and convert CITATION.cff files.",
            "name": "py-cffconvert"
        },
        {
            "description": "Project to handle conda recipes.",
            "name": "py-conda-souschef"
        },
        {
            "description": "Custodian is a simple, robust and flexible just-in-time (JIT) job\nmanagement framework written in Python. Using custodian, you can create\nwrappers that perform error checking, job management and error recovery.\nIt has a simple plugin framework that allows you to develop specific job\nmanagement workflows for different applications.",
            "name": "py-custodian"
        },
        {
            "description": "Common Workflow Language standalone document upgrader",
            "name": "py-cwl-upgrader"
        },
        {
            "description": "Python Utilities and Autogenerated Classes for loading and parsing CWL\nv1.0, CWL v1.1, and CWL v1.2 documents.",
            "name": "py-cwl-utils"
        },
        {
            "description": "Common workflow language reference implementation",
            "name": "py-cwltool"
        },
        {
            "description": "An analysis environment for satellite and other earth observation data.",
            "name": "py-datacube"
        },
        {
            "description": "dateparser -- python parser for human readable dates",
            "name": "py-dateparser"
        },
        {
            "description": "Git for data scientists - manage your code and data together.",
            "name": "py-dvc"
        },
        {
            "description": "FireWorks stores, executes, and manages calculation workflows.",
            "name": "py-fireworks"
        },
        {
            "description": "Command-line utilities to assist in managing Galaxy servers",
            "name": "py-gravity"
        },
        {
            "description": "Project to generate recipes for conda packages.",
            "name": "py-grayskull"
        },
        {
            "description": "Jupyter Telemetry enables Jupyter Applications to record events and\ntransmit them to destinations as structured data",
            "name": "py-jupyter-telemetry"
        },
        {
            "description": "Python lib/cli for JSON/YAML schema validation",
            "name": "py-pykwalify"
        },
        {
            "description": "Python Materials Genomics is a robust materials analysis code that\ndefines core object representations for structures and molecules with\nsupport for many electronic structure codes. It is currently the core\nanalysis code powering the Materials Project.",
            "name": "py-pymatgen"
        },
        {
            "description": "Advanced Python dictionaries with dot notation access Box will\nautomatically make otherwise inaccessible keys safe to access as an\nattribute. You can always pass conversion_box=False to Box to disable\nthat behavior. Also, all new dict and lists added to a Box or BoxList\nobject are converted automatically.",
            "name": "py-python-box"
        },
        {
            "description": "Robocrystallographer is a tool to generate text descriptions of crystal\nstructures. Similar to how a real-life crystallographer would analyse a\nstructure, robocrystallographer looks at the symmetry, local\nenvironment, and extended connectivity when generating a description.\nThe package includes utilities for identifying molecule names, component\norientations, heterostructure information, and more.",
            "name": "py-robocrys"
        },
        {
            "description": "jinja2 pre and post-processor to update with YAML.",
            "name": "py-ruamel-yaml-jinja2"
        },
        {
            "description": "Schema Annotations for Linked Avro Data (SALAD)",
            "name": "py-schema-salad"
        },
        {
            "description": "Box of handy tools for Sphinx.",
            "name": "py-sphinx-toolbox"
        },
        {
            "description": "Local filesystem registry for containers (intended for HPC) using Lmod\nor Environment Modules. Works for users and admins.",
            "name": "singularity-hpc"
        }
    ],
    "description": " a YAML parser/emitter that supports roundtrip preservation of comments,\nseq/map flow style, and map key order\n",
    "homepage": "https://sourceforge.net/p/ruamel-yaml/code/ci/default/tree",
    "latest_version": "0.17.32",
    "maintainers": [],
    "name": "py-ruamel-yaml",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "python_pip",
            "description": "Build systems supported by the package",
            "name": "build_system"
        }
    ],
    "versions": [
        {
            "name": "0.17.32",
            "sha256": "ec939063761914e14542972a5cba6d33c23b0859ab6342f61cf070cfc600efc2"
        },
        {
            "name": "0.17.16",
            "sha256": "1a771fc92d3823682b7f0893ad56cb5a5c87c48e62b5399d6f42c8759a583b33"
        },
        {
            "name": "0.16.10",
            "sha256": "099c644a778bf72ffa00524f78dd0b6476bca94a1da344130f4bf3381ce5b954"
        },
        {
            "name": "0.16.5",
            "sha256": "412a6f5cfdc0525dee6a27c08f5415c7fd832a7afcb7a0ed7319628aed23d408"
        },
        {
            "name": "0.11.7",
            "sha256": "c89363e16c9eafb9354e55d757723efeff8682d05e56b0881450002ffb00a344"
        }
    ],
    "versions_deprecated": []
}