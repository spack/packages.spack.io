{
    "aliases": [],
    "build_system": "MakefilePackage",
    "conflicts": [
        {
            "description": null,
            "name": "arch=windows-None-None",
            "spec": "build_system=makefile"
        }
    ],
    "dependencies": [
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "The libffi library provides a portable, high level programming interface\nto various calling conventions. This allows a programmer to call any\nfunction specified by a call interface description at run time.",
            "name": "libffi"
        },
        {
            "description": "This is patchutils, a collection of tools that operate on patch files.",
            "name": "patchutils"
        }
    ],
    "dependent_to": [
        {
            "description": "Stub package for packages which are currently part of core racket\ninstallation (but which may change in the future).",
            "name": "rkt-base"
        },
        {
            "description": "Racket library for running a C compiler/linker.",
            "name": "rkt-cext-lib"
        },
        {
            "description": "Stub package for packages which are currently part of core Racket\ninstallation (but which may change in the future).",
            "name": "rkt-compiler-lib"
        },
        {
            "description": "Racket library for running a C compiler/linker.",
            "name": "rkt-dynext-lib"
        },
        {
            "description": "Stub package for packages which are currently part of core racket\ninstallation (but which may change in the future).",
            "name": "rkt-racket-lib"
        },
        {
            "description": "RackUnit testing framework.",
            "name": "rkt-rackunit-lib"
        },
        {
            "description": "Legacy Scheme Library.",
            "name": "rkt-scheme-lib"
        },
        {
            "description": "Utilities for interoperating between different testing libraries.",
            "name": "rkt-testing-util-lib"
        },
        {
            "description": "Libraries for handling zo files.",
            "name": "rkt-zo-lib"
        }
    ],
    "description": "The Racket programming language.\n",
    "homepage": "https://www.racket-lang.org",
    "latest_version": "8.3",
    "maintainers": [
        "arjunguha",
        "elfprince13"
    ],
    "name": "racket",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": false,
            "description": "Build Racket BC (old MZScheme VM)",
            "name": "bc"
        },
        {
            "default": "makefile",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": true,
            "description": "Build Racket CS (new ChezScheme VM)",
            "name": "cs"
        },
        {
            "default": true,
            "description": "Just-in-Time Compilation",
            "name": "jit"
        },
        {
            "default": true,
            "description": "Enable shared",
            "name": "shared"
        }
    ],
    "versions": [
        {
            "name": "8.3",
            "sha256": "3b963cd29ae119e1acc2c6dc4781bd9f25027979589caaae3fdfc021aac2324b"
        }
    ],
    "versions_deprecated": []
}