{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [
        {
            "description": null,
            "name": "+cuda+thrust",
            "spec": ""
        },
        {
            "description": null,
            "name": "+jali~mpi",
            "spec": ""
        },
        {
            "description": null,
            "name": "+kokkos+thrust",
            "spec": ""
        }
    ],
    "dependencies": [
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "blas"
        },
        {
            "description": "Boost provides free peer-reviewed portable C++ source libraries,\nemphasizing libraries that work well with the C++ Standard Library.\nBoost libraries are intended to be widely useful, and usable across a\nbroad spectrum of applications. The Boost license encourages both\ncommercial and non-commercial use.",
            "name": "boost"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "CUDA is a parallel computing platform and programming model invented by\nNVIDIA. It enables dramatic increases in computing performance by\nharnessing the power of the graphics processing unit (GPU). Note: This\npackage does not currently install the drivers necessary to run CUDA.\nThese will need to be installed manually. See:\nhttps://docs.nvidia.com/cuda/ for details.",
            "name": "cuda"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "FleCSI is a compile-time configurable framework designed to support\nmulti-physics application development. As such, FleCSI attempts to\nprovide a very general set of infrastructure design patterns that can be\nspecialized and extended to suit the needs of a broad variety of solver\nand data requirements. Current support includes multi-dimensional mesh\ntopology, mesh geometry, and mesh adjacency information.",
            "name": "flecsi"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "Jali is a parallel, unstructured mesh infrastructure library designed\nfor use by multi-physics simulations.",
            "name": "jali"
        },
        {
            "description": "Kokkos implements a programming model in C++ for writing performance\nportable applications targeting all major HPC platforms.",
            "name": "kokkos"
        },
        {
            "description": "Lightweight but flexible shim designed to rectify the incompatibilities\nbetween the Accelerate/vecLib BLAS and LAPACK libraries shipped with\nmacOS and FORTRAN code compiled with modern compilers such as GNU\nFortran.",
            "name": "lapack"
        },
        {
            "description": "IBM MPI implementation from Spectrum MPI.",
            "name": "mpi"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        },
        {
            "description": "Thrust is a parallel algorithms library which resembles the C++ Standard\nTemplate Library (STL).",
            "name": "thrust"
        }
    ],
    "dependent_to": [
        {
            "description": "Portage is a framework that computational physics applications can use\nto build a highly customized, hybrid parallel (MPI+X) conservative\nremapping library for transfer of field data between meshes.",
            "name": "portage"
        },
        {
            "description": "Tangram is an material interface reconstruction package used in\nmultimaterial ALE codes and multi-material remapping\n(https://github.com/laristra/portage)",
            "name": "tangram"
        }
    ],
    "description": "Wonton is a support package for the Portage\n(https://github.com/laristra/portage) and Tangram\n(https://github.com/laristra/tangram) libraries. It contains some\nmesh/state classes, wrappers for other mesh/state libraries and some\nutilities required by Portage and Tangram.\n",
    "homepage": "https://portage.lanl.gov",
    "latest_version": "1.3.2",
    "maintainers": [
        "raovgarimella"
    ],
    "name": "wonton",
    "patches": [
        {
            "level": 1,
            "owner": "builtin.wonton",
            "relative_path": "fix-cmake-config.patch",
            "reverse": false,
            "sha256": "30f047c8a1cf9750d8c73a4a2e724a89ba8ea1c280455c955c18babcbe5dc599",
            "version": "@1.2.0:1.3.3",
            "working_dir": "."
        },
        {
            "level": 1,
            "owner": "builtin.wonton",
            "relative_path": "fix-cmake-config-r3d.patch",
            "reverse": false,
            "sha256": "3abefdd97f73f34ebf5e881cd037944561614e65530766681296a93cbb861c79",
            "version": "@1.3.0:1.3.3",
            "working_dir": "."
        }
    ],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": false,
            "description": "Enable GPU parallelism using CUDA",
            "name": "cuda"
        },
        {
            "default": false,
            "description": "Enable FlecSI",
            "name": "flecsi"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": false,
            "description": "Enable Jali mesh wrappers",
            "name": "jali"
        },
        {
            "default": false,
            "description": "Enable on-node or device parallelism with Kokkos",
            "name": "kokkos"
        },
        {
            "default": true,
            "description": "Use LAPACKE solvers",
            "name": "lapacke"
        },
        {
            "default": false,
            "description": "Enable distributed meshes with MPI",
            "name": "mpi"
        },
        {
            "default": false,
            "description": "Enable on-node parallelism using OpenMP",
            "name": "openmp"
        },
        {
            "default": false,
            "description": "Enable on-node parallelism using NVidia Thrust library",
            "name": "thrust"
        }
    ],
    "versions": [
        {
            "name": "1.3.2",
            "sha256": "a03f00cd95290c2dbe8724d430de19537ea644b75161614ed4ac918376fcf64d"
        },
        {
            "name": "1.2.11",
            "sha256": "613436c799b392a99355db1cbf1062f1da39f3287eed665a5cd43bb65364d926"
        },
        {
            "name": "1.2.10",
            "sha256": "c5c2c99f040f1fa5a8da21ac5ccbbc5b226d1fd43ce3eb14c76d211601b65a72"
        },
        {
            "name": "1.2.1",
            "sha256": "4f00513d1abe86f256214d2b5171b1575b2cd464df8609307c24cbc4c595c305"
        }
    ],
    "versions_deprecated": []
}