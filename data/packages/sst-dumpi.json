{
    "aliases": [],
    "build_system": "AutotoolsPackage",
    "conflicts": [
        {
            "description": null,
            "name": "arch=windows-None-None",
            "spec": "build_system=autotools"
        }
    ],
    "dependencies": [
        {
            "description": "Autoconf -- system configuration part of autotools",
            "name": "autoconf"
        },
        {
            "description": "Automake -- make file builder part of autotools",
            "name": "automake"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "c"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "cxx"
        },
        {
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications.",
            "name": "fortran"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "The GNU config.guess and config.sub scripts versioned by timestamp.\nThis package can be used as a build dependency for autotools packages\nthat ship a tarball with outdated config.guess and config.sub files.",
            "name": "gnuconfig"
        },
        {
            "description": "libtool -- library building part of autotools.",
            "name": "libtool"
        },
        {
            "description": "GNU M4 is an implementation of the traditional Unix macro processor.",
            "name": "m4"
        }
    ],
    "dependent_to": [
        {
            "description": "CO-Design of multi-layer Exascale Storage (CODES) simulation framework",
            "name": "codes"
        },
        {
            "description": "SST Elements implements a range of components for performing\narchitecture simulation from node-level to system-level using the SST\ndiscrete event core.",
            "name": "sst-elements"
        }
    ],
    "description": "The DUMPI package provides libraries to collect and read traces of MPI\napplications. Traces are created by linking an application with a\nlibrary that uses the PMPI interface to intercept MPI calls. DUMPI\nrecords signatures of all MPI-1 and MPI-2 subroutine calls, return\nvalues, request information, and PAPI counters.\n",
    "homepage": "https://github.com/sstsimulator/sst-dumpi",
    "latest_version": "13.0.0",
    "maintainers": [
        "berquist",
        "jmlapre"
    ],
    "name": "sst-dumpi",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "autotools",
            "description": "Build systems supported by the package",
            "name": "build_system"
        }
    ],
    "versions": [
        {
            "branch": "master",
            "name": "master"
        },
        {
            "name": "13.0.0",
            "sha256": "0eaa5cf5826c9fbba6cfeed42f52af67c5a7d45bc8cbb485c2a3867b7438229b"
        },
        {
            "name": "12.1.0",
            "sha256": "b718658cbb0be957d28883f7cc914617bff97b3629fad7017cd62e14ed667d9d"
        },
        {
            "name": "12.0.1",
            "sha256": "6e74e5f16ee26c83b17ecd5c272a61ec37977f07f531066533dd610805f9117b"
        },
        {
            "name": "12.0.0",
            "sha256": "04989c900adb253262808e59897d9f9b8df5dbd497a03820c3340640055dcf4f"
        },
        {
            "name": "11.1.0",
            "sha256": "58144b4b7543705ef648ca86ea4ebf3c739554ea8a472123aadc2967a8201cdd"
        }
    ],
    "versions_deprecated": []
}